%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 16.0.0
%%For: (Nate) ()
%%Title: (playerbitswat.ai)
%%CreationDate: 2/17/2013 8:14 PM
%%Canvassize: 16383
%%BoundingBox: 216 349 395 452
%%HiResBoundingBox: 216.8984 349.7109 394.4121 451.5337
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%RGBProcessColor: 0 0 0 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 305.9951 396.4355 305.9951 396.4355
%AI3_TileBox: -90.5 90.5 701.5 702.5
%AI3_DocumentPreview: None
%AI5_ArtSize: 178.0098 112.8706
%AI5_RulerUnits: 2
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: 205 463.25 8 1821 1035 18 0 0 50 116 0 0
%AI5_OpenViewLayers: 777777
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 128 76 8
%%BeginData: 7797 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD06FF52F82705FFFFFF52000027A8FD74FF272F3027A8FFFF5229
%5B05A7FD74FF522F5B05FFFFFF52305B287DFD74FF273030057DA8A15107
%5B05A1FD74FF520628F8282728F8545B287DFD74FFF805285A305B5B2829
%5B0527A8FD72FF2728315B5B5B315B052F5B28F827A8FD70FF2706315B31
%5B315B312F2F5B285A0627FD6FFFA727315B315B555B315B5B5B315B5B5B
%05A8FD6EFF52065B315B315B315B315B315B315B5B2F27FD6EFF2730315B
%555B315B555B315B555B315B5B27A8FD6CFF5227305B315B315B315B315B
%315B315B315B05A7FD6AFFA827F80028052805282854305B315B555B315B
%5B2F7CFD6AFF27277D7DFD08F80005F85B315B315B0652FD6DFFA8FD0BF8
%305B5B5B312F52FD6DFFA8FD05F82751765127F8303155305B0752FD6DFF
%7D52C9A7A7CFCACFCFCFC927305BF8F8303052FD14FFA2A3A9A3A9A3A97E
%A8FD50FF7D4BC97CCFC9CFC9CAC9CF263030F8F82F077CFD13FFA801FD06
%252327FD50FF7D527C52CFCFC9CFC9CFC951065B292F31057DFD13FFA822
%2549254925492352FD50FF7D4BCF7CCFC9CFC9CFC9CF76F80730300527FD
%14FFA800FD06252327FD50FF7D52CFCFC9CAA7CFC9CFC9CF7C4B272627FD
%15FFA8282549254925492352FD50FFA826CF7C52515251CAC9CFC9CFCFA0
%20FD16FFA8014925252549252327FD43FFA87D52A8FD0AFF5251CAA7CFC9
%CFC9CFA7A1767627A8FD16FFA8222549254925492352FD15FFAF7DA8FD1C
%FFA8A87DFD0BFF52272752207DFD09FFA82E20272676C9CF5127525252FD
%18FFA801FD06252327FD14FF5220442052A8FD19FF52FD0427A8FD08FFA8
%2776A17C7627FD0CFFA8AF27A7CF7C27FD1BFFA8222549254925492352FD
%13FFA820B0B0B0447DFD18FFA82776A1A15152FD07FFA87D27A77DA17627
%FD0EFF524B7C522720527DFD18FFA8012525492525252327FD13FF5268FC
%B0B08C27FD18FF7D27A17CA1762752522752FD042726274B522727F8A8FD
%0AFFA16F6F2052524B6869444452FD17FFA8222549254925492352FD13FF
%7D68B08DB08C52FD18FF7D2776765127F85151525276527D7C7DF827F827
%F8277DFD09FFA8444420444BA744444469682027FD16FFA800FD06252327
%FD13FF5268FCB08C8D27FD19FFF827F826F826527D527D527C527C522727
%524B7C277DFD09FF774B208D688D4B4568FD04B04452FD15FFA828254925
%4925492352FD13FF7D68B0B0B08C52FD19FF272752277D27527C7D7C7D76
%7D7C7D2776A1A17D7652FD09FFA8F88DB0B0444544B08CB08CB08C20A8FD
%15FF00FD042549252327FD13FF5268FCB0FCB027FD19FF277C7D7D7D5227
%7D527D527C527D7C5127A17C7D5252FD09FF8345B0B0B08D20698DB08DB0
%B0B04452FD14FFCF282549254925492352FD13FF7D206F4B6F4452FD19FF
%7D4BA17CA1524B7C7D767D7C7D767D514B7DA17DA127FD09FF5268B08CB0
%8C4544B08CB08CB0FC8DF8AFFD14FF00FD06252327FD13FF5227A1C9A752
%27FD19FF524B7C7D7C7CF87C527C527C527C5276F876767C27F8A8FD08FF
%4C8DFD04B0686FFD06B08D447DFD13FFCF282549254925492352FD13FF7D
%7CCFCACFA77DFD19FFA827A17DA14B27767D767D7C7D767D7C2720512752
%277DFD08FF4B8CB08CB08CB08CB08CB08CB08CB04452FD14FF0025254925
%25252327FD13FF7D7CC9CFC9A752FD19FFA8F8204B274B2052767C527D52
%7C527D20527DA7A72752FD08FF21B0B0B08DB0B0B08DB0B0B08DB0B08D20
%FD13FFAE282549254925492352FD13FF7D7CCFC9CFA752FD1AFF26767DA7
%A727277D7C7D767D7C7D7C51205227272652FD07FFA84B8CB08CB08CB08C
%B08CB08CB08CB08C207DFD12FFCF00FD06252327FD13FF7D7CC9CAC9A752
%FD1AFF5226522727F851767C527C527C527C274B5276767C27FD08FF45FD
%0FB0207DFD12FFAE282549254925492352FD13FFA17CCFC9CFA77CFD1AFF
%522751767676277D7C7D767D7C7D7C5227A17DA17C4BFD07FFA8458CB08C
%B08CB08CB08CB08CB08CB0B04452FD13FF00FD042549252327FD13FF7DA0
%C9CAC9A752FD1AFF7D27A17CA15227527D527C527D527C52277C7D767D27
%A8FD07FF44FD05B08DB0B0B08DB0B0B08DB0684CFD12FFCF282549254925
%492352FD13FF7D7CCFC9CFA17DFD1AFF7D517D7D7C7D277C767D7C7D767D
%7C7C27A17DA17D4B7DFD06FFA8458CB08CB08CB08CB08CB08CB08CB08C8D
%20FD13FF00FD0525242327FD13FF7D7CC9CFC9A752FD1AFFA8277D7C7D7C
%27517C527C527C527C52272776514BF87DFD07FF44FD0FB08D27AEFD11FF
%CF282549254925492352FD13FF7D7CCFC9CFA77DFD1BFF27527D7652F852
%7C7D7C7D767D7C7D27275152512752FD06FFA8458CB08CB08CB08CB08CB0
%8CB08CB08CB020A8FD12FF002525492525252327FD13FF7D7CC9CFC9A752
%FD1BFFF827274B2727277D767D7C7D767D7C51205227272652FD06FFCB20
%B0B0B08DB0B0B08DB0B0B08DB0B0B08C447DFD11FFAE2825492549254923
%52FD13FF7D7CCFC9CFA752FD1BFF5227524B51204B52522752FD0627767D
%7CA1277DFD05FFA2448CB08CB08CB08CB08CB08CB08CB08CB0207DFD11FF
%CF00FD06252327FD13FF7D7CC9CAC9A752FD1BFF7D274B52527DF8275252
%527D7DA8A87D27A176765152F87DFD04FFA844FD10B0447DFD11FFAE2825
%49254925492352FD13FFA17CCFC9CFA77CFD1BFF7D4BA87D7D525227FD07
%FF512727525252262727FD04FF7D44FCB08CB08CB08CB08CB08CB08CB08C
%B0447DFD12FF00FD042549252327FD13FF7DA0C9CAC9A752FD1BFF274B27
%522752F8F852FD05FF7DF8F852515251527DFD05FFA844B08DB0B0B08DB0
%B0B08DB0B0B08DB0B06852FD11FFCF282549254925492352FD13FF7D7CCF
%C9CFA17DFD1AFF7DF82752525227527DFD07FFA8A87DA8A8FD08FF7D44FC
%B08CB08CB08CB08CB08CB08CB08CB04452FD12FF00FD06252327FD13FF7D
%7CC9CFC9A752FD1AFFA8527D527D7DA8FD16FFA844FD10B06927FD11FFCF
%282549254925492352FD13FF7D7CCFC9CFA77DFD37FF7D68B0B08CB08CB0
%8CB08CB08CB08CB08CB06827FD12FF002525492525252427FD13FF7D7CC9
%CFC9A752FD37FF7D44B0B0B08DB0B0B08DB0B0B08DFD04B08D27FD11FFCF
%282549254925492327FD13FF7D7CCFC9CFA752FD37FF5268FCB08CB08CB0
%8CB08CB08CB08CB08CB06827AFFD0FFFA8A8002424252425252400FD13FF
%7D7CC9CAC9A752FD37FF7D68FD10B08D20FD0DFFA87D2727F82620270027
%00220027FD13FFA17CCFC9CFA77CFD37FF528CFCB08CB08CB08CB08CB08C
%B08CB08CB08C21AEFD0BFF7D20F8202026204A204A204A202027FD13FF7C
%A1C9CAC9C952FD37FF528CB08DB0B0B08DB0B0B08DB0B0B08DB0B0B020FD
%0BFF7D264A4A204B4A4A204B4A4A204B2052FD13FF7E76CFCACF7C7DFD11
%FFA8FD25FF278D8CB08CB08CB08CB08CB08CB08CB08CB08C2084FD09FFA8
%274A75204A204A204A204A204A202027FD13FFA8517CCFA04BA8FD10FF52
%F852A8FD22FFAF4B8DFD11B020A8FD09FFA8F84B4B4B204B264B204B264B
%2027F852FD14FFA87C52527DFD0FFFAF522044F8A8FD22FFAF20B08CB08C
%B08CB08CB08CB08CB08CB08CB08C447DFD09FFA8FD10F8FD27FFA8272026
%52A8FD23FFA845FCB0B0B08DB0B0B08DB0B0B08DFD05B02084FD0AFFFD04
%7DFD09527D52A8FD27FF51202784FD25FF8444B08CB08CB08CB08CB08CB0
%8CB08CB08CB08C447DFD40FF7D2027A8FD26FF7D69FD12B0447DFD40FF27
%4A7DFD27FF7D68B08CB08CB08CB08CB08CB08CB08CB08CB0FC4452FD3FFF
%A84420A8FD27FF528DB0B08DB0B0B08DB0B0B08DB0B0B08DB0B0B0447DFD
%3FFFA8444BA8FD27FF2768B08CB08CB0FCB068688CB0FCB0FCB08CB08C44
%2EFD3FFF524420FD28FF7D218CB08CB08C8D444B524B448D6845204B4B4B
%27A8FD3FFF7D444BAFFD28FF5220204B274C527DA8FFAF8352527DAFA8FF
%A8FD41FF276827FD2AFFA8FFAFFD50FF4B447DFD7DFF204452FD7DFF5244
%4B7DFD7CFFA826442027A8FD7BFFA851202020527DFD7BFF7D2727F82020
%527DFD7AFFA87D4B27202052FD7CFFA87D20F8A8FD7EFF527DFD7FFFA8FD
%1AFFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Vectorized Object) (Image Tracing) (Vectorize.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (Swatch Libraries.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
3 Bn
%AI5_BeginGradient: (Unnamed gradient 2)
(Unnamed gradient 2) 0 2 Bd
[
0
0
0
0
1
1
1
4 %_Br
[
0 0 0 0 1 1 1 2 50 100 %_BS
%_0 0 0 0 1 1 1 2 50 100 Bs
0 0 0 0 1 1 1 2 50 0 %_BS
%_0 0 0 0 1 1 1 2 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 3)
(Unnamed gradient 3) 0 2 Bd
[
0
0
0
0
1
1
1
4 %_Br
[
0 0 0 0 1 1 1 2 50 100 %_BS
%_0 0 0 0 1 1 1 2 50 100 Bs
0 0 0 0 1 1 1 2 50 0 %_BS
%_0 0 0 0 1 1 1 2 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 5)
(Unnamed gradient 5) 0 2 Bd
[
0.75021
0.679683
0.670222
0.90164
0
0
0
4 %_Br
[
0.75021 0.679683 0.670222 0.90164 0 0 0 2 50 100 %_BS
%_0.75021 0.679683 0.670222 0.90164 0 0 0 2 50 100 Bs
0.75021 0.679683 0.670222 0.90164 0 0 0 2 50 0 %_BS
%_0.75021 0.679683 0.670222 0.90164 0 0 0 2 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginPalette
0 0 Pb
0.75021 0.679683 0.670222 0.90164 ([Registration]) 0 Xs
([Registration])
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 5 79 255 255 0 50 Lb
(Layer 6) Ln
0 A
u
0 O
0.519524 0.434333 0.434333 0.079133 0.498039 0.498039 0.498039 Xa
0 J 0 j 1 w 10 M []0 d0 XR
364.7568 416.3838 m
383.376 417.8623 L
386.9102 394.2314 L
365.9268 392.6006 L
364.7568 416.3838 L
f
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
364.7568 416.3838 m
364.7969 415.8853 L
382.9502 417.3271 L
386.3359 394.6885 L
366.4004 393.1387 L
365.2559 416.4082 L
364.7568 416.3838 L
364.7969 415.8853 L
364.7568 416.3838 L
364.2578 416.3594 L
365.4521 392.0625 L
387.4844 393.7744 L
383.8018 418.3975 L
364.2334 416.8438 L
364.2578 416.3594 L
364.7568 416.3838 L
f
0 0 0 0 1 1 1 Xa
383.3867 391.6035 m
382.8652 389.6377 L
387.1367 389.3799 L
392.9941 391.4707 L
392.0469 393.0742 L
383.3867 391.6035 L
f
0.429389 0.441382 0.355779 0.025452 0.592157 0.533333 0.560784 Xa
390.9248 394.5264 m
386.6621 419.6675 l
386.041 423.3276 378.8223 422.1035 379.4424 418.4434 C
383.7051 393.3027 L
382.4531 390.375 l
386.0762 391.5244 389.3906 391.8613 393.2822 392.2109 C
390.9248 394.5264 L
f
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
390.9248 394.5264 m
391.418 394.6104 L
387.1553 419.751 l
387.0059 420.6567 386.4814 421.3506 385.8027 421.77 c
385.123 422.1938 384.3027 422.375 383.4727 422.376 c
382.4004 422.374 381.3018 422.0737 380.4287 421.4956 c
379.5615 420.9243 378.9023 420.0171 378.9043 418.8823 c
378.9043 418.7114 378.9189 418.5371 378.9492 418.3599 C
383.1875 393.3643 L
381.5645 389.5684 L
382.6045 389.8984 l
386.168 391.0293 389.4365 391.3633 393.3271 391.7129 C
394.4043 391.8096 L
391.2754 394.8828 L
390.9248 394.5264 L
391.418 394.6104 L
390.9248 394.5264 L
390.5742 394.1699 L
392.9316 391.8545 L
393.2822 392.2109 L
393.2373 392.709 l
389.3447 392.3594 385.9844 392.0195 382.3018 390.8516 C
382.4531 390.375 L
382.9131 390.1787 L
384.2227 393.2412 L
379.9355 418.5269 l
379.9141 418.6509 379.9043 418.769 379.9043 418.8823 c
379.9063 419.6147 380.3047 420.2041 380.9834 420.6631 c
381.6572 421.1147 382.5918 421.3779 383.4727 421.376 c
384.1563 421.377 384.7998 421.2197 385.2715 420.9224 c
385.7441 420.6206 386.0586 420.2104 386.1689 419.584 C
390.459 394.2832 L
390.5742 394.1699 L
390.9248 394.5264 L
f
381.4785 389.6602 m
382.3809 389.1211 383.5791 388.9355 384.8975 388.9316 c
386.6973 388.9326 388.7275 389.3008 390.4795 389.834 c
391.3545 390.1016 392.1592 390.4111 392.8311 390.7441 c
393.5049 391.0791 394.0449 391.4268 394.4121 391.833 C
393.666 392.499 l
393.4541 392.2568 392.9961 391.9385 392.3877 391.6396 c
390.5586 390.7295 387.3916 389.9268 384.8975 389.9316 c
383.6797 389.9277 382.627 390.1279 381.9961 390.5156 C
381.4785 389.6602 L
f
0.288975 0.233249 0.23566 0 0.717647 0.713726 0.713726 Xa
381.624 408.1025 m
383.2344 406.8027 387.5879 407.7803 388.2793 409.2749 C
388.8516 406.1904 l
387.4697 404.1831 382.5156 404.5161 382.0684 405.0854 C
381.624 408.1025 L
f
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
381.624 408.1025 m
381.3096 407.7134 l
381.9854 407.1777 382.9033 407.001 383.8564 406.9966 c
384.8418 406.9976 385.8789 407.2002 386.7617 407.5425 c
387.2021 407.7144 387.6045 407.9214 387.9434 408.1685 c
388.2813 408.416 388.5635 408.7036 388.7334 409.0649 C
388.2793 409.2749 L
387.7881 409.1836 L
388.3604 406.0991 L
388.8516 406.1904 L
388.4395 406.4741 l
388.1416 406.0332 387.5469 405.6816 386.8018 405.4624 c
386.0615 405.2407 385.1924 405.1484 384.417 405.1489 c
383.8564 405.1489 383.3408 405.1968 382.9648 405.269 c
382.7773 405.3042 382.623 405.3467 382.5264 405.3838 C
382.4316 405.4268 L
382.4268 405.4302 L
382.3301 405.2905 L
382.4619 405.3945 L
382.4268 405.4302 L
382.3301 405.2905 L
382.4619 405.3945 L
382.0684 405.0854 L
382.5635 405.1582 L
382.1191 408.1753 L
381.624 408.1025 L
381.3096 407.7134 L
381.624 408.1025 L
381.1289 408.0298 L
381.5928 404.8809 L
381.6748 404.7764 l
381.8369 404.585 381.9941 404.5225 382.1709 404.4492 c
382.6924 404.2559 383.4863 404.1528 384.417 404.1489 c
385.2705 404.1499 386.2188 404.2456 387.0869 404.5039 c
387.9521 404.7637 388.7598 405.1836 389.2637 405.9067 C
389.3809 406.0776 L
388.4844 410.9092 L
387.8252 409.4849 l
387.7617 409.3433 387.6035 409.1567 387.3545 408.9766 c
386.6104 408.4229 385.124 407.9888 383.8564 407.9966 c
383.0342 407.9922 382.3145 408.1787 381.9385 408.4917 C
380.9434 409.2944 L
381.1289 408.0298 L
381.624 408.1025 L
f
0.288975 0.233249 0.23566 0 0.717647 0.713726 0.713726 Xa
382.9883 397.6641 m
386.168 396.5127 389.0723 397.4731 390.0469 398.7935 C
390.3896 396.6846 l
388.7363 394.7734 383.877 395.0273 383.2285 395.6582 C
382.9883 397.6641 L
f
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
382.9883 397.6641 m
382.8184 397.1938 l
383.8691 396.8135 384.8965 396.6499 385.8447 396.6499 c
387.9238 396.6597 389.627 397.4063 390.4492 398.4966 C
390.0469 398.7935 L
389.5537 398.7134 L
389.8965 396.6045 L
390.3896 396.6846 L
390.0117 397.0117 l
389.6318 396.5679 388.9697 396.2217 388.1865 396.0054 c
387.4063 395.7871 386.5166 395.6953 385.7197 395.6953 c
385.1445 395.6953 384.6152 395.7432 384.2168 395.8193 c
384.0176 395.8564 383.8506 395.9014 383.7354 395.9434 C
383.6045 396.001 L
383.5762 396.0181 L
383.5703 396.0098 L
383.5771 396.0166 L
383.5762 396.0181 L
383.5703 396.0098 L
383.5771 396.0166 L
383.2285 395.6582 L
383.7246 395.7178 L
383.4844 397.7236 L
382.9883 397.6641 L
382.8184 397.1938 L
382.9883 397.6641 L
382.4922 397.6045 L
382.7529 395.4229 L
382.8799 395.2998 l
383.0381 395.1514 383.2021 395.0771 383.3906 395.0049 c
383.9482 394.8037 384.7695 394.6982 385.7197 394.6953 c
386.5928 394.6963 387.5586 394.793 388.4551 395.042 c
389.3496 395.2939 390.1875 395.6914 390.7676 396.3574 C
390.9209 396.5342 L
390.3496 400.0459 L
389.6445 399.0903 l
389.1289 398.3677 387.6729 397.6406 385.8447 397.6499 c
385.0107 397.6499 384.0996 397.7935 383.1582 398.1343 C
382.3955 398.4106 L
382.4922 397.6045 L
382.9883 397.6641 L
f
0.288975 0.233249 0.23566 0 0.717647 0.713726 0.713726 Xa
379.8652 416.6792 m
382.7119 415.9678 385.7598 416.686 386.7822 417.8521 C
387.1338 416.5806 l
385.4629 414.5879 380.459 414.8491 380.0117 415.418 C
379.8652 416.6792 L
f
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
379.8652 416.6792 m
379.7441 416.1943 l
380.5693 415.9878 381.4063 415.8965 382.2109 415.8965 c
383.2725 415.8965 384.2773 416.0552 385.1309 416.3315 c
385.9844 416.6108 386.6914 416.9966 387.1582 417.5225 C
386.7822 417.8521 L
386.3008 417.7188 L
386.6523 416.4473 L
387.1338 416.5806 L
386.751 416.9019 l
386.3564 416.4258 385.6553 416.0586 384.832 415.8311 c
384.0107 415.6016 383.083 415.5068 382.2754 415.5073 c
381.7246 415.5073 381.2285 415.5513 380.8701 415.6182 c
380.6914 415.6509 380.5459 415.6904 380.4561 415.7246 C
380.3711 415.7632 L
380.3662 415.7563 L
380.3711 415.7622 L
380.3711 415.7632 L
380.3662 415.7563 L
380.3711 415.7622 L
380.2295 415.5894 L
380.4043 415.7271 L
380.3711 415.7622 L
380.2295 415.5894 L
380.4043 415.7271 L
380.0117 415.418 L
380.5088 415.4756 L
380.3623 416.7368 L
379.8652 416.6792 L
379.7441 416.1943 L
379.8652 416.6792 L
379.3682 416.6216 L
379.5313 415.2202 L
379.6182 415.1089 l
379.7773 414.9204 379.9326 414.8594 380.1035 414.7891 c
380.6074 414.6035 381.3662 414.5112 382.2754 414.5073 c
383.1592 414.5078 384.1631 414.6074 385.1006 414.8682 c
386.0352 415.1309 386.917 415.5498 387.5166 416.2593 C
387.6855 416.4604 L
387.0176 418.8784 L
386.4063 418.1816 l
386.1309 417.8623 385.5645 417.52 384.8232 417.2827 c
384.082 417.0425 383.1719 416.896 382.2109 416.8965 c
381.4824 416.896 380.7246 416.9795 379.9863 417.1641 C
379.2852 417.3394 L
379.3682 416.6216 L
379.8652 416.6792 L
f
0.429389 0.441382 0.355779 0.025452 0.592157 0.533333 0.560784 Xa
369.8955 392.9375 m
365.6328 418.0781 l
365.0117 421.7383 357.793 420.5142 358.4141 416.854 C
362.6768 391.7129 L
361.4248 388.7852 l
365.0469 389.9355 368.3613 390.2715 372.2539 390.6211 C
369.8955 392.9375 L
f
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
369.8955 392.9375 m
370.3887 393.0215 L
366.126 418.1616 l
365.9766 419.0674 365.4521 419.7612 364.7734 420.1807 c
364.0938 420.6045 363.2734 420.7856 362.4434 420.7866 c
361.3711 420.7847 360.2725 420.4849 359.4004 419.9063 c
358.5332 419.335 357.874 418.4282 357.876 417.2935 c
357.876 417.1226 357.8906 416.9478 357.9209 416.77 C
362.1592 391.7744 L
360.5361 387.9785 L
361.5762 388.3086 l
365.1387 389.4404 368.4072 389.7734 372.2988 390.123 C
373.376 390.2197 L
370.2461 393.2939 L
369.8955 392.9375 L
370.3887 393.0215 L
369.8955 392.9375 L
369.5449 392.5811 L
371.9033 390.2646 L
372.2539 390.6211 L
372.209 391.1191 l
368.3154 390.7695 364.9551 390.4307 361.2734 389.2617 C
361.4248 388.7852 L
361.8848 388.5889 L
363.1943 391.6514 L
358.9072 416.9375 l
358.8857 417.062 358.876 417.1802 358.876 417.2935 c
358.8779 418.0259 359.2764 418.6152 359.9551 419.0742 c
360.6279 419.5254 361.5625 419.7886 362.4434 419.7866 c
363.127 419.7876 363.7705 419.6309 364.2422 419.333 c
364.7148 419.0313 365.0293 418.6211 365.1396 417.9946 C
369.4297 392.6943 L
369.5449 392.5811 L
369.8955 392.9375 L
f
360.4502 388.0703 m
361.3516 387.5313 362.5508 387.3457 363.8691 387.3418 c
365.668 387.3428 367.6992 387.7109 369.4502 388.2441 c
370.3252 388.5117 371.1299 388.8213 371.8018 389.1543 c
372.4756 389.4893 373.0156 389.8369 373.3828 390.2432 C
372.6367 390.9092 l
372.4248 390.667 371.9668 390.3486 371.3584 390.0498 c
369.5293 389.1396 366.3623 388.3369 363.8691 388.3418 c
362.6514 388.3379 361.5977 388.5381 360.9678 388.9258 C
360.4502 388.0703 L
f
0.288975 0.233249 0.23566 0 0.717647 0.713726 0.713726 Xa
360.5957 406.5132 m
362.2051 405.2134 366.5586 406.1909 367.251 407.6855 C
367.8223 404.6011 l
366.4414 402.5938 361.4863 402.9268 361.0391 403.4956 C
360.5957 406.5132 L
f
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
360.5957 406.5132 m
360.2813 406.124 l
360.957 405.5879 361.874 405.4116 362.8271 405.4072 c
363.8125 405.4082 364.8506 405.6108 365.7324 405.9531 c
366.1729 406.125 366.5752 406.332 366.915 406.5791 c
367.2529 406.8267 367.5352 407.1143 367.7051 407.4756 C
367.251 407.6855 L
366.7598 407.5947 L
367.3311 404.5103 L
367.8223 404.6011 L
367.4102 404.8843 l
367.1123 404.4434 366.5176 404.0923 365.7725 403.873 c
365.0322 403.6514 364.1631 403.5591 363.3877 403.5596 c
362.8262 403.5596 362.3115 403.6074 361.9355 403.6792 c
361.7471 403.7148 361.5938 403.7568 361.4971 403.7939 C
361.4023 403.8374 L
361.3975 403.8408 L
361.2998 403.7007 L
361.4316 403.8047 L
361.3975 403.8408 L
361.2998 403.7007 L
361.4316 403.8047 L
361.0391 403.4956 L
361.5342 403.5684 L
361.0908 406.5859 L
360.5957 406.5132 L
360.2813 406.124 L
360.5957 406.5132 L
360.1006 406.4404 L
360.5635 403.291 L
360.6455 403.1865 l
360.8076 402.9946 360.9648 402.9326 361.1416 402.8594 c
361.6631 402.666 362.4561 402.563 363.3877 402.5596 c
364.2402 402.5601 365.1895 402.6563 366.0576 402.9146 c
366.9229 403.1743 367.7305 403.5938 368.2344 404.3179 C
368.3516 404.4883 L
367.457 409.3193 L
366.7969 407.896 l
366.7334 407.7539 366.5752 407.5674 366.3262 407.3872 c
365.5811 406.8335 364.0947 406.3994 362.8271 406.4072 c
362.0049 406.4028 361.2861 406.5894 360.9102 406.9023 C
359.915 407.7056 L
360.1006 406.4404 L
360.5957 406.5132 L
f
0.288975 0.233249 0.23566 0 0.717647 0.713726 0.713726 Xa
361.959 396.0747 m
365.1396 394.9238 368.0439 395.8828 369.0186 397.2041 C
369.3613 395.0957 l
367.707 393.1846 362.8477 393.4385 362.2002 394.0684 C
361.959 396.0747 L
f
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
361.959 396.0747 m
361.7891 395.6045 l
362.8408 395.2236 363.8682 395.0605 364.8174 395.0605 c
366.8955 395.0703 368.5986 395.8164 369.4209 396.9072 C
369.0186 397.2041 L
368.5254 397.124 L
368.8682 395.0156 L
369.3613 395.0957 L
368.9834 395.4229 l
368.6035 394.9785 367.9404 394.6328 367.1572 394.417 c
366.376 394.1982 365.4863 394.1055 364.6895 394.1064 c
364.1143 394.1064 363.5859 394.1543 363.1875 394.2295 c
362.9883 394.2666 362.8223 394.3115 362.7061 394.3545 C
362.5762 394.4111 L
362.5479 394.4277 L
362.541 394.4189 L
362.5488 394.4268 L
362.5479 394.4277 L
362.541 394.4189 L
362.5488 394.4268 L
362.2002 394.0684 L
362.6963 394.1279 L
362.4551 396.1343 L
361.959 396.0747 L
361.7891 395.6045 L
361.959 396.0747 L
361.4629 396.0151 L
361.7246 393.833 L
361.8516 393.71 l
362.0098 393.5615 362.1738 393.4873 362.3623 393.415 c
362.9189 393.2148 363.7402 393.1094 364.6895 393.1064 c
365.5625 393.1064 366.5283 393.2041 367.4258 393.4531 c
368.3203 393.7041 369.1582 394.1025 369.7393 394.7686 C
369.8926 394.9453 L
369.3213 398.457 L
368.6162 397.501 l
368.1006 396.7778 366.6455 396.0513 364.8174 396.0605 c
363.9824 396.0605 363.0713 396.2041 362.1289 396.5449 C
361.3652 396.8213 L
361.4629 396.0151 L
361.959 396.0747 L
f
0.288975 0.233249 0.23566 0 0.717647 0.713726 0.713726 Xa
358.8369 415.0898 m
361.6836 414.3784 364.7305 415.0962 365.7539 416.2627 C
366.1045 414.9912 l
364.4336 412.9985 359.4297 413.2598 358.9824 413.8286 C
358.8369 415.0898 L
f
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
358.8369 415.0898 m
358.7158 414.605 l
359.541 414.3984 360.3789 414.3071 361.1826 414.3066 c
362.2441 414.3071 363.249 414.4658 364.1025 414.7417 c
364.9551 415.021 365.6631 415.4067 366.1299 415.9331 C
365.7539 416.2627 L
365.2715 416.1299 L
365.6221 414.8584 L
366.1045 414.9912 L
365.7217 415.3125 l
365.3271 414.8364 364.626 414.4692 363.8027 414.2417 c
362.9814 414.0122 362.0537 413.9175 361.2461 413.918 c
360.6953 413.918 360.1992 413.9619 359.8408 414.0288 c
359.6621 414.0615 359.5166 414.1011 359.4268 414.1353 C
359.3418 414.1738 L
359.3369 414.167 L
359.3418 414.1729 L
359.3418 414.1738 L
359.3369 414.167 L
359.3418 414.1729 L
359.2002 414 L
359.375 414.1377 L
359.3418 414.1729 L
359.2002 414 L
359.375 414.1377 L
358.9824 413.8286 L
359.4795 413.8857 L
359.334 415.147 L
358.8369 415.0898 L
358.7158 414.605 L
358.8369 415.0898 L
358.3398 415.0327 L
358.502 413.6309 L
358.5889 413.5195 l
358.748 413.3311 358.9033 413.2695 359.0742 413.1992 c
359.5781 413.0142 360.3369 412.9219 361.2461 412.918 c
362.1299 412.9185 363.1338 413.0176 364.0713 413.2788 c
365.0059 413.5415 365.8877 413.9609 366.4873 414.6699 C
366.6563 414.8711 L
365.9893 417.2891 L
365.3779 416.5923 l
365.1025 416.2725 364.5361 415.9307 363.7939 415.6934 c
363.0537 415.4531 362.1436 415.3066 361.1826 415.3066 c
360.4541 415.3066 359.6973 415.3901 358.958 415.5752 C
358.2578 415.75 L
358.3398 415.0327 L
358.8369 415.0898 L
f
0.199771 0.92694 1 0.103914 0.717647 0.2 0.109804 Xa
341.7988 361.375 m
340.9531 358.0332 349.3926 355.1738 354.2021 354.1172 C
355.4766 351.1699 l
350.4355 354.7852 339.1348 355.0371 339.541 360.9531 c
341.3975 370.8281 339.2578 370.5293 347.9355 376.9883 C
350.0918 375.3906 l
339.5664 370.9219 344.1582 368.1914 341.7988 361.375 C
f
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
341.7988 361.375 m
341.3145 361.498 l
341.2646 361.3018 341.2393 361.1025 341.2393 360.9063 c
341.2393 360.4082 341.3984 359.9316 341.6582 359.498 c
342.1162 358.7383 342.875 358.0801 343.8066 357.4727 c
346.6006 355.6621 351.0449 354.3027 354.0947 353.6289 C
354.2021 354.1172 L
353.7432 353.9189 L
355.0176 350.9717 L
355.4766 351.1699 L
355.7676 351.5762 l
353.1572 353.4375 349.1494 354.3857 345.8174 355.6025 c
344.1523 356.2051 342.665 356.8721 341.6348 357.6875 c
340.6035 358.5117 340.0371 359.415 340.0303 360.6465 c
340.0303 360.7354 340.0332 360.8262 340.04 360.918 C
339.541 360.9531 L
340.0322 360.8604 l
340.5 363.3457 340.7158 365.1953 340.9111 366.6494 c
341.0576 367.7412 341.1924 368.6074 341.4043 369.3535 c
341.7256 370.4717 342.1973 371.3369 343.2148 372.4229 c
344.2324 373.5039 345.8008 374.7764 348.2344 376.5869 C
347.9355 376.9883 L
347.6377 376.5869 L
349.7939 374.9893 L
350.0918 375.3906 L
349.8965 375.8506 l
347.2373 374.7207 345.5039 373.6934 344.3506 372.6436 c
343.4863 371.8574 342.9531 371.0469 342.6416 370.2109 c
342.1738 368.9531 342.1885 367.6904 342.1309 366.3057 c
342.0762 364.918 341.9668 363.3916 341.3262 361.5391 C
341.3193 361.5186 L
341.3145 361.498 L
341.7988 361.375 L
342.2715 361.2119 l
342.8818 362.9727 343.043 364.4814 343.1094 365.7871 c
343.1592 366.7656 343.1592 367.6299 343.249 368.4063 c
343.3896 369.5732 343.6914 370.5234 344.6689 371.5576 c
345.6504 372.5898 347.3574 373.6885 350.2871 374.9307 C
351.0918 375.2725 L
347.9346 377.6113 L
347.6367 377.3896 l
345.4609 375.7695 343.9541 374.5684 342.873 373.5029 c
341.248 371.9141 340.5908 370.5586 340.2354 368.7627 c
339.8711 366.9697 339.7422 364.7256 339.0498 361.0459 C
339.0439 361.0166 L
339.042 360.9883 l
339.0342 360.8721 339.0303 360.7588 339.0303 360.6465 c
339.0234 359.0674 339.832 357.8252 341.0156 356.9023 c
342.7949 355.5068 345.4385 354.6484 348.0996 353.7725 c
350.7568 352.9053 353.4307 352.0273 355.1855 350.7637 C
356.6523 349.7119 L
354.5596 354.5508 L
354.3096 354.6055 l
352.0488 355.1016 348.9541 356.0098 346.4629 357.166 c
345.2178 357.7422 344.123 358.3838 343.3711 359.04 c
342.9941 359.3682 342.7041 359.6973 342.5166 360.0117 c
342.3281 360.3281 342.2402 360.6201 342.2393 360.9063 c
342.2402 361.0195 342.2539 361.1338 342.2832 361.252 C
341.7988 361.375 L
342.2715 361.2119 L
341.7988 361.375 L
f
0 0.991394 0.954681 0 1 0.031373 0.105882 Xa
315.1973 408.6108 m
315.1973 416.854 l
315.1973 421.3999 322.7734 421.3999 322.7402 416.9019 C
322.7715 408.5835 L
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
315.6973 408.6108 m
315.6973 416.854 l
315.7031 417.8521 316.0938 418.5361 316.6982 419.0254 c
317.3027 419.5107 318.1475 419.7705 318.9961 419.7695 c
319.8369 419.7705 320.668 419.5156 321.2607 419.0425 c
321.8535 418.5649 322.2344 417.9009 322.2402 416.9312 C
322.2402 416.9004 L
322.2715 408.5815 l
322.2725 408.3057 322.4971 408.0825 322.7734 408.0835 c
323.0498 408.0845 323.2725 408.3091 323.2715 408.5854 C
323.2402 416.9038 L
323.2402 416.9312 l
323.2461 418.1855 322.6934 419.1899 321.8828 419.8257 c
321.0732 420.4658 320.0322 420.7686 318.9961 420.7695 c
317.9502 420.7686 316.8955 420.46 316.0742 419.8071 c
315.252 419.1587 314.6914 418.1348 314.6973 416.854 C
314.6973 408.6108 l
314.6973 408.3345 314.9209 408.1108 315.1973 408.1108 c
315.4736 408.1108 315.6973 408.3345 315.6973 408.6108 C
f
0 0.130831 0.219913 0 1 0.878431 0.768627 Xa
322.7979 379.415 m
322.7979 373.7695 315.2217 373.7695 315.2217 379.415 C
315.2217 408.5381 l
315.2217 410.667 322.7988 410.667 322.7988 408.5835 C
322.7979 379.415 L
f
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
322.7979 379.415 m
322.3281 379.415 l
322.3252 378.1074 321.8975 377.1865 321.2822 376.5732 c
320.666 375.96 319.8408 375.6514 319.0098 375.6514 c
318.1787 375.6514 317.3535 375.96 316.7373 376.5732 c
316.1221 377.1865 315.6943 378.1074 315.6914 379.415 C
315.6914 408.5381 l
315.6943 408.6597 315.7334 408.7588 315.876 408.9004 c
316.0859 409.1079 316.5371 409.3232 317.1064 409.459 c
317.6758 409.5981 318.3594 409.6704 319.041 409.6704 c
319.9385 409.6719 320.8379 409.542 321.4639 409.3096 c
321.7764 409.1953 322.0166 409.0542 322.1533 408.9229 c
322.291 408.7866 322.3262 408.6948 322.3281 408.5835 C
322.3281 379.415 L
322.7979 379.415 L
323.2676 379.415 L
323.2686 408.5835 l
323.2715 408.9902 323.0723 409.3525 322.7998 409.605 c
322.3887 409.9893 321.8193 410.2178 321.168 410.3779 c
320.5166 410.5352 319.7803 410.6104 319.041 410.6108 c
318.0439 410.6094 317.0488 410.4756 316.2529 410.1812 c
315.8555 410.0322 315.5029 409.8438 315.2256 409.5796 c
314.9492 409.3203 314.749 408.9517 314.752 408.5381 C
314.752 379.415 l
314.749 377.8994 315.2686 376.7031 316.0742 375.9063 c
316.8779 375.1074 317.9473 374.7109 319.0098 374.7109 c
320.0723 374.7109 321.1416 375.1074 321.9453 375.9063 c
322.751 376.7031 323.2705 377.8994 323.2676 379.415 C
322.7979 379.415 L
f
0.400092 0.845151 0.893797 0.635096 0.313726 0.094118 0.015686 Xa
275.5469 381.0479 m
264.3438 380.0859 265.7422 374.332 265.793 373.4209 c
275.2197 372.4961 282.3408 372.9141 286.7695 373.1484 C
286.791 384.8672 L
278.7002 387.6758 L
275.5469 381.0479 L
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
275.5469 381.0479 m
275.5034 381.5547 l
271.0161 381.168 268.4375 380.0225 266.9634 378.6309 c
265.4858 377.2383 265.1978 375.625 265.2036 374.5498 c
265.2031 373.9824 265.2803 373.5225 265.2852 373.3926 c
265.2993 373.1426 265.4946 372.9395 265.7432 372.915 c
270.1904 372.4785 274.1279 372.3398 277.5127 372.3398 c
281.332 372.3398 284.4492 372.5166 286.7964 372.6406 c
287.0659 372.6553 287.2773 372.8779 287.2778 373.1475 C
287.2993 384.8662 l
287.2998 385.083 287.1621 385.2764 286.9575 385.3477 C
278.8672 388.1563 l
278.6221 388.2412 278.3525 388.1279 278.2412 387.8945 C
275.0879 381.2666 L
275.5469 381.0479 L
275.5034 381.5547 L
275.5469 381.0479 L
276.0059 380.8291 L
278.9634 387.0459 L
286.2822 384.5059 L
286.2612 373.1494 L
286.7695 373.1484 L
286.7427 373.6563 l
284.3936 373.5322 281.3013 373.3564 277.5127 373.3564 c
274.1558 373.3564 270.2529 373.4941 265.8428 373.9268 C
265.793 373.4209 L
266.3008 373.4492 l
266.2842 373.7031 266.2202 374.0566 266.2202 374.5498 c
266.2256 375.4678 266.4331 376.7227 267.6621 377.8926 c
268.894 379.0615 271.2329 380.168 275.5903 380.541 c
275.7695 380.5566 275.9287 380.667 276.0059 380.8291 C
275.5469 381.0479 L
F
0.870573 0.756405 0 0 0 0.121569 1 Xa
275.5371 428.8979 m
275.6572 381.0703 l
276.4868 381.2705 277.1333 381.1045 278.1157 380.9395 c
278.7925 380.8252 279.6289 380.7109 280.7949 380.7168 c
282.0552 380.7305 282.8481 380.6191 283.5444 380.5078 c
284.4888 380.3574 285.2554 380.207 286.7695 380.3662 C
286.7695 428.8975 L
275.5371 428.8979 L
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
275.0288 428.897 m
275.1489 381.0693 l
275.1494 380.9131 275.2207 380.7666 275.3433 380.6709 c
275.4658 380.5742 275.6245 380.54 275.7764 380.5762 c
276.0083 380.6318 276.2158 380.6533 276.4307 380.6543 c
277.3013 380.667 278.4014 380.2109 280.7129 380.208 C
280.7954 380.208 L
280.8003 380.209 L
280.998 380.21 l
282.1118 380.209 282.8135 380.1094 283.4644 380.0059 c
284.1133 379.9033 284.729 379.79 285.5742 379.79 c
285.9404 379.79 286.3486 379.8105 286.8223 379.8604 c
287.0815 379.8877 287.2778 380.1055 287.2778 380.3662 C
287.2778 428.8975 L
286.2612 428.8975 L
286.2612 380.3662 L
286.7695 380.3662 L
286.7168 380.8721 l
286.2734 380.8252 285.9019 380.8066 285.5742 380.8066 c
284.8208 380.8066 284.292 380.9033 283.6245 381.0098 c
282.959 381.1162 282.1719 381.2266 280.998 381.2266 C
280.7896 381.2246 L
280.7944 381.2256 L
280.7129 381.2246 l
278.5317 381.2217 277.6201 381.6572 276.4307 381.6709 c
276.1445 381.6709 275.8486 381.6396 275.5381 381.5645 C
275.6572 381.0703 L
276.1655 381.0713 L
276.0454 428.8994 L
275.0288 428.8965 L
275.0288 428.897 L
F
*u
1 D
0.511711 0.770871 0.770993 0.764675 0.203922 0.062745 0.011765 Xa
268.8311 373.8633 m
268.8169 373.6719 l
269.5493 373.6191 270.2651 373.5732 270.9653 373.5352 C
270.9785 373.7119 l
270.7515 373.7256 270.5288 373.7402 270.3115 373.7549 c
269.7856 373.79 269.29 373.8262 268.8311 373.8633 C
F
267.0308 374.0264 m
267.0151 373.8174 l
267.5571 373.7695 268.0913 373.7266 268.6177 373.6875 C
268.6318 373.8789 l
268.0249 373.9287 267.4868 373.9785 267.0308 374.0264 C
F
266.3418 374.1035 m
266.3252 373.8809 l
266.4897 373.8652 266.6528 373.8496 266.8159 373.835 C
266.8315 374.0469 l
266.6538 374.0664 266.4897 374.085 266.3418 374.1035 C
F
*U
*u
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
268.8169 373.6719 m
268.8032 373.4893 L
270.96 373.4619 L
270.9653 373.5352 l
270.2651 373.5732 269.5493 373.6191 268.8169 373.6719 C
F
267.0151 373.8174 m
266.9922 373.5127 L
268.603 373.4922 L
268.6177 373.6875 l
268.0913 373.7266 267.5571 373.7695 267.0151 373.8174 C
F
266.3252 373.8809 m
266.3057 373.6172 L
266.3066 373.5342 l
266.3066 373.5293 266.3066 373.5254 266.3066 373.5205 C
266.792 373.5146 L
266.8159 373.835 l
266.6528 373.8496 266.4897 373.8652 266.3252 373.8809 C
F
*U
*u
0.511711 0.770871 0.770993 0.764675 0.203922 0.062745 0.011765 Xa
282.7158 373.6113 m
282.2666 373.584 281.811 373.5625 281.3516 373.5439 C
281.3418 373.415 l
281.8105 373.4287 282.2651 373.4443 282.7046 373.4609 C
282.7158 373.6113 L
F
284.2505 373.7256 m
283.814 373.6865 283.3691 373.6523 282.9175 373.624 C
282.9058 373.4688 l
283.3657 373.4873 283.8086 373.5068 284.2354 373.5273 C
284.2505 373.7256 L
F
285.7183 373.8828 m
285.3066 373.8301 284.8838 373.7842 284.4521 373.7441 C
284.437 373.5371 l
284.875 373.5586 285.2949 373.5801 285.6973 373.6006 C
285.7183 373.8828 L
F
286.2251 373.9502 m
286.1245 373.9355 286.0229 373.9219 285.9209 373.9082 C
285.8984 373.6113 l
286.0142 373.6172 286.1284 373.623 286.2407 373.6299 C
286.2251 373.9502 L
F
*U
*u
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
282.7046 373.4609 m
282.2651 373.4443 281.8105 373.4287 281.3418 373.415 C
281.3359 373.3301 L
282.6938 373.3135 L
282.7046 373.4609 L
F
284.2354 373.5273 m
283.8086 373.5068 283.3657 373.4873 282.9058 373.4688 C
282.894 373.3105 L
284.2183 373.2939 L
284.2354 373.5273 L
F
285.6973 373.6006 m
285.2949 373.5801 284.875 373.5586 284.437 373.5371 C
284.4185 373.291 L
285.6729 373.2754 L
285.6973 373.6006 L
F
286.2407 373.6299 m
286.1284 373.623 286.0142 373.6172 285.8984 373.6113 C
285.8735 373.2734 L
286.2588 373.2686 L
286.2407 373.6299 L
F
*U
0 D
0.511711 0.770871 0.770993 0.764675 0.203922 0.062745 0.011765 Xa
271.1782 373.7002 m
271.165 373.5244 l
271.8608 373.4873 272.54 373.457 273.2031 373.4336 C
273.3784 373.4316 L
273.3901 373.5879 l
272.6196 373.6201 271.8779 373.6582 271.1782 373.7002 C
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
271.165 373.5244 m
271.1602 373.459 L
273.2031 373.4336 l
272.54 373.457 271.8608 373.4873 271.165 373.5244 C
F
*u
1 D
0.511711 0.770871 0.770993 0.764675 0.203922 0.062745 0.011765 Xa
281.1504 373.5371 m
280.5786 373.5166 280.001 373.502 279.4219 373.4941 C
279.4126 373.3711 l
280.0088 373.3799 280.585 373.3936 281.1411 373.4092 C
281.1504 373.5371 L
F
273.5898 373.5801 m
273.5786 373.4287 L
275.1895 373.4082 L
275.1982 373.5254 l
274.6523 373.54 274.1147 373.5586 273.5898 373.5801 C
F
*U
0 D
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
281.1411 373.4092 m
280.585 373.3936 280.0088 373.3799 279.4126 373.3711 C
279.4116 373.3545 L
281.1353 373.333 L
281.1411 373.4092 L
F
*u
1 D
0.511711 0.770871 0.770993 0.764675 0.203922 0.062745 0.011765 Xa
279.2212 373.4912 m
278.8521 373.4873 278.4819 373.4844 278.1133 373.4844 c
277.9453 373.4844 277.7773 373.4854 277.6099 373.4863 C
277.6021 373.3779 L
278.7666 373.3633 l
278.916 373.3643 279.0649 373.3662 279.2119 373.3682 C
279.2212 373.4912 L
F
275.3984 373.5205 m
275.3896 373.4063 L
277.4019 373.3799 L
277.4097 373.4873 l
276.7319 373.4922 276.0591 373.5039 275.3984 373.5205 C
F
*U
0 D
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
279.2119 373.3682 m
279.0649 373.3662 278.916 373.3643 278.7666 373.3633 C
279.2114 373.3574 L
279.2119 373.3682 L
F
266.3066 373.5342 m
266.291 374.6904 L
265.791 374.6836 L
265.7095 374.1904 l
266.4004 374.0771 268.0796 373.9033 270.3115 373.7549 c
272.5396 373.6064 275.3037 373.4844 278.1133 373.4844 c
281.1519 373.4854 284.2407 373.626 286.7769 374.0332 C
286.6973 374.5273 L
286.1978 374.5029 L
286.2603 373.2373 l
286.2739 372.9609 286.5088 372.749 286.7842 372.7627 c
287.0605 372.7764 287.2729 373.0107 287.2593 373.2861 C
287.1968 374.5518 l
287.1895 374.6943 287.123 374.8262 287.0122 374.916 c
286.9009 375.0059 286.7588 375.0439 286.6177 375.0205 c
284.1704 374.627 281.1191 374.4844 278.1133 374.4844 c
275.332 374.4844 272.5874 374.6055 270.3779 374.752 c
268.1719 374.8984 266.4854 375.0752 265.8726 375.1768 c
265.7261 375.2012 265.5776 375.1592 265.4648 375.0625 c
265.3525 374.9658 265.2891 374.8252 265.291 374.6768 C
265.3066 373.5205 l
265.3105 373.2441 265.5371 373.0234 265.8135 373.0273 c
266.0894 373.0313 266.3105 373.2578 266.3066 373.5342 C
F
0.544762 0.749783 0.745632 0.788327 0.176471 0.05098 0.007843 Xa
270.1318 379.3916 m
269.9517 379.3203 269.7803 379.2461 269.6167 379.1709 c
269.6812 379.126 269.7393 379.0801 269.79 379.0264 c
269.9785 378.835 270.1401 378.5293 270.2231 377.8232 c
270.2378 377.6953 270.3462 377.6016 270.4712 377.6016 c
270.481 377.6016 270.4907 377.6016 270.5005 377.6035 c
270.6377 377.6191 270.7358 377.7432 270.7202 377.8799 c
270.6338 378.6387 270.438 379.084 270.1455 379.3779 c
270.1411 379.3828 270.1362 379.3877 270.1318 379.3916 C
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
269.0967 380.0078 m
269.0127 380.0078 268.9307 379.9658 268.8838 379.8887 c
268.8115 379.7705 268.8481 379.6172 268.9658 379.5449 c
269.2261 379.3877 269.4443 379.2881 269.6167 379.1709 c
269.7803 379.2461 269.9517 379.3203 270.1318 379.3916 c
269.8428 379.6729 269.5244 379.7852 269.2275 379.9707 c
269.1865 379.9961 269.1416 380.0078 269.0967 380.0078 C
F
0.544762 0.749783 0.745632 0.788327 0.176471 0.05098 0.007843 Xa
271.0146 379.7051 m
270.8232 379.6455 270.6396 379.583 270.4639 379.5186 c
270.5488 379.457 270.626 379.3926 270.6953 379.3164 c
270.9063 379.0869 271.082 378.7432 271.1646 378.041 c
271.1792 377.9131 271.2876 377.8193 271.4126 377.8193 c
271.4224 377.8193 271.4321 377.8203 271.4414 377.8213 c
271.5791 377.8369 271.6772 377.9609 271.6616 378.0977 c
271.5752 378.8604 271.3623 379.334 271.062 379.6563 c
271.0464 379.6729 271.0303 379.6895 271.0146 379.7051 C
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
269.9766 380.3574 m
269.8926 380.3574 269.8105 380.3154 269.7632 380.2383 c
269.6914 380.1201 269.728 379.9658 269.8462 379.8945 C
269.8462 379.8945 l
270.0806 379.752 270.2886 379.6445 270.4639 379.5186 c
270.6396 379.583 270.8232 379.6455 271.0146 379.7051 c
270.7261 379.9932 270.4014 380.1387 270.1069 380.3203 c
270.0664 380.3457 270.0215 380.3574 269.9766 380.3574 C
F
0.544762 0.749783 0.745632 0.788327 0.176471 0.05098 0.007843 Xa
271.9976 379.9795 m
271.7925 379.9297 271.5947 379.877 271.4043 379.8223 c
271.5088 379.749 271.6055 379.6699 271.6924 379.5771 c
271.9297 379.3232 272.124 378.9609 272.2065 378.2646 c
272.2217 378.1367 272.3296 378.043 272.4551 378.043 c
272.4644 378.043 272.4741 378.043 272.4839 378.0449 c
272.6211 378.0605 272.7192 378.1846 272.7031 378.3213 c
272.6162 379.0898 272.376 379.583 272.0562 379.9199 c
272.0366 379.9404 272.0171 379.96 271.9976 379.9795 C
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
270.9268 380.6582 m
270.8428 380.6582 270.7607 380.6162 270.7134 380.5391 c
270.6416 380.4209 270.6782 380.2676 270.7959 380.1953 c
271.0156 380.0615 271.2222 379.9512 271.4043 379.8223 c
271.5947 379.877 271.7925 379.9297 271.9976 379.9795 c
271.6924 380.2773 271.3516 380.4395 271.0576 380.6211 c
271.0166 380.6465 270.9717 380.6582 270.9268 380.6582 C
F
0.544762 0.749783 0.745632 0.788327 0.176471 0.05098 0.007843 Xa
273.0537 380.2061 m
272.8613 380.1699 272.6748 380.1328 272.4932 380.0938 c
272.8184 379.7666 273.0908 379.25 273.1973 378.3965 c
273.2119 378.2695 273.3203 378.1758 273.4448 378.1758 c
273.4546 378.1758 273.4648 378.1768 273.4746 378.1777 c
273.6118 378.1934 273.71 378.3184 273.6934 378.4551 c
273.6064 379.2305 273.3643 379.7988 273.0537 380.2061 C
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
271.9766 380.9883 m
271.8794 380.9883 271.7871 380.9316 271.7466 380.8359 c
271.6924 380.709 271.7515 380.5625 271.8784 380.5088 c
272.0859 380.417 272.2988 380.2891 272.4932 380.0938 c
272.6748 380.1328 272.8613 380.1699 273.0537 380.2061 c
272.7632 380.5869 272.4131 380.8281 272.0747 380.9688 c
272.0425 380.9814 272.0093 380.9883 271.9766 380.9883 C
F
0.511711 0.770871 0.770993 0.764675 0.203922 0.062745 0.011765 Xa
286.2734 379.8135 m
286.2393 379.8115 286.2056 379.8096 286.1719 379.8076 c
285.6479 377.709 285.3335 376.0742 282.5869 374.6973 C
283.7715 374.6885 l
284.645 374.7588 285.4829 374.8506 286.2646 374.9668 C
286.2734 379.8135 L
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
286.3677 379.8203 m
286.3359 379.8174 286.3047 379.8154 286.2734 379.8135 C
286.2646 374.9668 l
286.3779 374.9834 286.4902 375 286.6011 375.0186 C
286.3677 379.8203 L
F
286.3369 380.4473 m
286.2783 380.2295 286.2241 380.0166 286.1719 379.8076 c
286.2056 379.8096 286.2393 379.8115 286.2734 379.8135 c
286.3047 379.8154 286.3359 379.8174 286.3677 379.8203 C
286.3369 380.4473 L
F
286.6011 375.0186 m
286.4902 375 286.3779 374.9834 286.2646 374.9668 c
285.4829 374.8506 284.645 374.7588 283.7715 374.6885 C
285.7769 374.6729 L
285.7773 374.6758 L
285.8203 374.6719 L
286.6182 374.666 L
286.6011 375.0186 L
F
270.96 373.4619 m
270.9277 373.0273 L
271.127 373.0117 L
271.1602 373.459 L
270.96 373.4619 L
F
0.614618 0.711482 0.714687 0.830899 0.113725 0.035294 0.007843 Xa
270.9785 373.7119 m
270.9653 373.5352 l
271.0322 373.5313 271.0986 373.5273 271.165 373.5244 C
271.1782 373.7002 l
271.1113 373.7041 271.0449 373.708 270.9785 373.7119 C
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
270.9653 373.5352 m
270.96 373.4619 L
271.1602 373.459 L
271.165 373.5244 l
271.0986 373.5273 271.0322 373.5313 270.9653 373.5352 C
F
271.0371 374.4961 m
270.9785 373.7119 l
271.0449 373.708 271.1113 373.7041 271.1782 373.7002 C
271.2363 374.4805 L
271.0371 374.4961 L
F
0.549401 0.745754 0.743618 0.791226 0.172549 0.05098 0.007843 Xa
273.3784 373.4316 m
273.3779 373.4277 l
273.4448 373.4248 273.5117 373.4229 273.5781 373.4209 C
273.5786 373.4287 L
273.3784 373.4316 L
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
273.3779 373.4277 m
273.3477 373.0166 L
273.5469 373.001 L
273.5781 373.4209 l
273.5117 373.4229 273.4448 373.4248 273.3779 373.4277 C
F
0.614618 0.711482 0.714687 0.830899 0.113725 0.035294 0.007843 Xa
273.3901 373.5879 m
273.3784 373.4316 L
273.5786 373.4287 L
273.5898 373.5801 l
273.5229 373.582 273.4565 373.585 273.3901 373.5879 C
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
273.457 374.4854 m
273.3901 373.5879 l
273.4565 373.585 273.5229 373.582 273.5898 373.5801 C
273.6563 374.4697 L
273.457 374.4854 L
F
0.549401 0.745754 0.743618 0.791226 0.172549 0.05098 0.007843 Xa
275.1895 373.4082 m
275.1875 373.3789 l
275.2544 373.3779 275.3208 373.376 275.3877 373.375 C
275.3896 373.4063 L
275.1895 373.4082 L
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
275.1875 373.3789 m
275.1582 372.9863 L
275.3574 372.9707 L
275.3877 373.375 l
275.3208 373.376 275.2544 373.3779 275.1875 373.3789 C
F
0.614618 0.711482 0.714687 0.830899 0.113725 0.035294 0.007843 Xa
275.1982 373.5254 m
275.1895 373.4082 L
275.3896 373.4063 L
275.3984 373.5205 l
275.3315 373.5215 275.2646 373.5234 275.1982 373.5254 C
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
275.2676 374.4551 m
275.1982 373.5254 l
275.2646 373.5234 275.3315 373.5215 275.3984 373.5205 C
275.4668 374.4395 L
275.2676 374.4551 L
F
0.549401 0.745754 0.743618 0.791226 0.172549 0.05098 0.007843 Xa
277.4019 373.3799 m
277.3999 373.3564 l
277.4375 373.3564 277.4751 373.3564 277.5127 373.3564 c
277.542 373.3564 277.5713 373.3564 277.6006 373.3564 C
277.6021 373.3779 L
277.4019 373.3799 L
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
277.3999 373.3564 m
277.3672 372.916 L
277.5664 372.9004 L
277.6006 373.3564 l
277.5713 373.3564 277.542 373.3564 277.5127 373.3564 c
277.4751 373.3564 277.4375 373.3564 277.3999 373.3564 C
F
0.614618 0.711482 0.714687 0.830899 0.113725 0.035294 0.007843 Xa
277.4097 373.4873 m
277.4019 373.3799 L
277.6021 373.3779 L
277.6099 373.4863 l
277.543 373.4863 277.4766 373.4863 277.4097 373.4873 C
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
277.4766 374.3848 m
277.4097 373.4873 l
277.4766 373.4863 277.543 373.4863 277.6099 373.4863 C
277.6758 374.3691 L
277.4766 374.3848 L
F
279.2114 373.3574 m
279.1777 372.9063 L
279.377 372.8906 L
279.4116 373.3545 L
279.2114 373.3574 L
F
0.614618 0.711482 0.714687 0.830899 0.113725 0.035294 0.007843 Xa
279.4219 373.4941 m
279.355 373.4932 279.2881 373.4922 279.2212 373.4912 C
279.2119 373.3682 l
279.2793 373.3691 279.3462 373.3701 279.4126 373.3711 C
279.4219 373.4941 L
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
279.4126 373.3711 m
279.3462 373.3701 279.2793 373.3691 279.2119 373.3682 C
279.2114 373.3574 L
279.4116 373.3545 L
279.4126 373.3711 L
F
279.2871 374.375 m
279.2212 373.4912 l
279.2881 373.4922 279.355 373.4932 279.4219 373.4941 C
279.4863 374.3594 L
279.2871 374.375 L
F
281.1353 373.333 m
281.1074 372.957 L
281.3066 372.9414 L
281.3359 373.3301 L
281.1353 373.333 L
F
0.614618 0.711482 0.714687 0.830899 0.113725 0.035294 0.007843 Xa
281.3516 373.5439 m
281.2847 373.542 281.2178 373.5391 281.1504 373.5371 C
281.1411 373.4092 l
281.208 373.4102 281.2754 373.4121 281.3418 373.415 C
281.3516 373.5439 L
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
281.3418 373.415 m
281.2754 373.4121 281.208 373.4102 281.1411 373.4092 C
281.1353 373.333 L
281.3359 373.3301 L
281.3418 373.415 L
F
281.2168 374.4258 m
281.1504 373.5371 l
281.2178 373.5391 281.2847 373.542 281.3516 373.5439 C
281.416 374.4102 L
281.2168 374.4258 L
F
282.6938 373.3135 m
282.6777 373.0967 L
282.877 373.0811 L
282.894 373.3105 L
282.6938 373.3135 L
F
0.614618 0.711482 0.714687 0.830899 0.113725 0.035294 0.007843 Xa
282.9175 373.624 m
282.8506 373.6191 282.7832 373.6152 282.7158 373.6113 C
282.7046 373.4609 l
282.772 373.4639 282.8394 373.4668 282.9058 373.4688 C
282.9175 373.624 L
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
282.9058 373.4688 m
282.8394 373.4668 282.772 373.4639 282.7046 373.4609 C
282.6938 373.3135 L
282.894 373.3105 L
282.9058 373.4688 L
F
282.7871 374.5654 m
282.7158 373.6113 l
282.7832 373.6152 282.8506 373.6191 282.9175 373.624 C
282.9863 374.5498 L
282.7871 374.5654 L
F
284.2183 373.2939 m
284.208 373.1563 L
284.4072 373.1406 L
284.4185 373.291 L
284.2183 373.2939 L
F
0.614618 0.711482 0.714687 0.830899 0.113725 0.035294 0.007843 Xa
284.4521 373.7441 m
284.3853 373.7373 284.3179 373.7314 284.2505 373.7256 C
284.2354 373.5273 l
284.3027 373.5303 284.3701 373.5342 284.437 373.5371 C
284.4521 373.7441 L
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
284.437 373.5371 m
284.3701 373.5342 284.3027 373.5303 284.2354 373.5273 C
284.2183 373.2939 L
284.4185 373.291 L
284.437 373.5371 L
F
284.3174 374.625 m
284.2505 373.7256 l
284.3179 373.7314 284.3853 373.7373 284.4521 373.7441 C
284.5166 374.6094 L
284.3174 374.625 L
F
285.6729 373.2754 m
285.668 373.207 L
285.8672 373.1914 L
285.8735 373.2734 L
285.6729 373.2754 L
F
0.614618 0.711482 0.714687 0.830899 0.113725 0.035294 0.007843 Xa
285.9209 373.9082 m
285.8535 373.8994 285.7861 373.8906 285.7183 373.8828 C
285.6973 373.6006 l
285.7646 373.6045 285.832 373.6074 285.8984 373.6113 C
285.9209 373.9082 L
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
285.8984 373.6113 m
285.832 373.6074 285.7646 373.6045 285.6973 373.6006 C
285.6729 373.2754 L
285.8735 373.2734 L
285.8984 373.6113 L
F
285.7769 374.6729 m
285.7183 373.8828 l
285.7861 373.8906 285.8535 373.8994 285.9209 373.9082 C
285.9766 374.6602 L
285.8203 374.6719 L
285.7769 374.6729 L
F
285.7773 374.6758 m
285.7769 374.6729 L
285.8203 374.6719 L
285.7773 374.6758 L
F
266.2891 373.3945 m
266.2866 373.3867 266.2847 373.3799 266.2822 373.3721 C
266.2871 373.3711 L
266.2891 373.3945 L
F
0.614618 0.711482 0.714687 0.830899 0.113725 0.035294 0.007843 Xa
266.2988 374.1084 m
266.3018 373.8828 l
266.3096 373.8818 266.3174 373.8809 266.3252 373.8809 C
266.3418 374.1035 l
266.3271 374.1045 266.313 374.1064 266.2988 374.1084 C
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
266.3018 373.8828 m
266.3057 373.6172 L
266.3252 373.8809 l
266.3174 373.8809 266.3096 373.8818 266.3018 373.8828 C
F
266.1973 374.8555 m
266.0879 373.3867 L
266.2822 373.3721 l
266.2847 373.3799 266.2866 373.3867 266.2891 373.3945 C
266.3057 373.6172 L
266.3018 373.8828 L
266.2988 374.1084 l
266.313 374.1064 266.3271 374.1045 266.3418 374.1035 C
266.3965 374.8398 L
266.1973 374.8555 L
F
266.792 373.5146 m
266.7773 373.3164 L
266.9766 373.3008 L
266.9922 373.5127 L
266.792 373.5146 L
F
0.614618 0.711482 0.714687 0.830899 0.113725 0.035294 0.007843 Xa
266.8315 374.0469 m
266.8159 373.835 l
266.8823 373.8291 266.9487 373.8232 267.0151 373.8174 C
267.0308 374.0264 l
266.9624 374.0332 266.896 374.04 266.8315 374.0469 C
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
266.8159 373.835 m
266.792 373.5146 L
266.9922 373.5127 L
267.0151 373.8174 l
266.9487 373.8232 266.8823 373.8291 266.8159 373.835 C
F
266.8867 374.7852 m
266.8315 374.0469 l
266.896 374.04 266.9624 374.0332 267.0308 374.0264 C
267.0859 374.7695 L
266.8867 374.7852 L
F
268.603 373.4922 m
268.5879 373.2871 L
268.7871 373.2715 L
268.8032 373.4893 L
268.603 373.4922 L
F
0.614618 0.711482 0.714687 0.830899 0.113725 0.035294 0.007843 Xa
268.6318 373.8789 m
268.6177 373.6875 l
268.6841 373.6816 268.751 373.6768 268.8169 373.6719 C
268.8311 373.8633 l
268.7642 373.8682 268.6973 373.874 268.6318 373.8789 C
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
268.6177 373.6875 m
268.603 373.4922 L
268.8032 373.4893 L
268.8169 373.6719 l
268.751 373.6768 268.6841 373.6816 268.6177 373.6875 C
F
268.6973 374.7559 m
268.6318 373.8789 l
268.6973 373.874 268.7642 373.8682 268.8311 373.8633 C
268.8965 374.7402 L
268.6973 374.7559 L
F
0.386267 0.727016 0.790951 0.428809 0.419608 0.235294 0.168627 Xa
268.2617 378.373 m
268.2231 378.3516 268.1787 378.3232 268.1299 378.29 c
267.9585 378.1592 267.8027 378.0254 267.6621 377.8926 c
266.6787 376.957 266.3491 375.9658 266.2544 375.1367 c
266.2837 375.126 266.3491 375.1123 266.4419 375.0977 c
267.1343 375.0137 268.2251 374.9082 269.564 374.8096 c
269.5811 374.8086 269.5942 374.8086 269.6035 374.8086 c
269.6084 374.8086 269.6123 374.8086 269.6152 374.8086 c
269.7549 376.1406 269.5996 377.999 268.2617 378.373 C
F
0.708309 0.647578 0.63769 0.677394 0.156863 0.156863 0.156863 Xa
268.1299 378.29 m
267.5674 377.9072 266.4033 376.7852 266.2461 375.1406 c
266.2485 375.1396 266.251 375.1387 266.2544 375.1367 c
266.3491 375.9658 266.6787 376.957 267.6621 377.8926 c
267.8027 378.0254 267.9585 378.1592 268.1299 378.29 C
F
266.4419 375.0977 m
267.1094 374.9941 269.1934 374.8242 269.564 374.8096 c
268.2251 374.9082 267.1343 375.0137 266.4419 375.0977 C
F
0.544762 0.749783 0.745632 0.788327 0.176471 0.05098 0.007843 Xa
274.1353 380.3799 m
273.9458 380.3545 273.7598 380.3262 273.5791 380.2969 c
273.6533 380.2119 273.7163 380.1152 273.7749 379.9971 c
273.9194 379.7031 274.0239 379.2539 274.1069 378.5322 c
274.1221 378.4043 274.23 378.3105 274.355 378.3105 c
274.3647 378.3105 274.3745 378.3115 274.3843 378.3125 c
274.5215 378.3281 274.6196 378.4521 274.604 378.5889 c
274.5166 379.332 274.4116 379.8301 274.2241 380.2168 c
274.1968 380.2744 274.167 380.3281 274.1353 380.3799 C
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
273.2773 381.1074 m
273.1934 381.1074 273.1113 381.0654 273.0645 380.9883 c
272.9922 380.8701 273.0293 380.7168 273.1465 380.6445 c
273.3315 380.5293 273.4683 380.4248 273.5791 380.2969 c
273.7598 380.3262 273.9458 380.3545 274.1353 380.3799 c
273.9531 380.6787 273.7056 380.8906 273.4077 381.0703 c
273.3672 381.0957 273.3223 381.1074 273.2773 381.1074 C
F
0.544762 0.749783 0.745632 0.788327 0.176471 0.05098 0.007843 Xa
276.4692 380.6543 m
276.4565 380.6543 276.4434 380.6543 276.4307 380.6543 c
276.2207 380.6533 276.0171 380.6328 275.791 380.5801 c
275.9702 380.5088 276.1299 380.4063 276.2612 380.2871 c
276.5146 380.0596 276.6455 379.7715 276.6406 379.5859 c
276.6392 379.4844 276.6138 379.415 276.5547 379.3477 c
276.4961 379.2813 276.3872 379.209 276.1865 379.1631 c
276.085 379.1475 275.9907 379.1387 275.9072 379.1387 c
275.9058 379.1387 l
275.6836 379.1445 275.5674 379.1807 275.4316 379.332 c
275.2949 379.4893 275.145 379.8359 275.0742 380.4766 c
275.0737 380.4824 275.0732 380.4873 275.0723 380.4922 c
274.8345 380.4678 274.603 380.4414 274.3774 380.4121 c
274.3779 380.4072 274.3784 380.4033 274.3789 380.3984 C
274.3789 380.3984 l
274.4609 379.6885 274.6216 379.2109 274.897 378.8809 c
275.166 378.5547 275.5493 378.4385 275.8794 378.4385 c
275.8882 378.4385 275.897 378.4385 275.9058 378.4385 c
276.043 378.4385 276.1758 378.4531 276.3037 378.4727 C
276.3257 378.4766 l
276.6382 378.5439 276.897 378.6797 277.0767 378.8809 c
277.2578 379.0811 277.3423 379.3398 277.3408 379.5859 c
277.3369 379.9648 277.1714 380.3223 276.9092 380.623 c
276.7534 380.6426 276.6084 380.6543 276.4692 380.6543 C
F
*u
1 D
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
274.7271 380.7871 m
274.7139 380.7871 274.7007 380.7871 274.687 380.7852 c
274.5 380.7637 274.3638 380.5986 274.3774 380.4121 c
274.603 380.4414 274.8345 380.4678 275.0723 380.4922 c
275.0454 380.6631 274.8975 380.7871 274.7271 380.7871 C
F
275.1479 381.3672 m
275.0146 381.3193 274.9185 381.1934 274.9155 381.0439 c
274.9121 380.8506 275.0659 380.6904 275.2593 380.6875 c
275.2817 380.6865 275.3042 380.6855 275.3262 380.6846 c
275.2139 380.7803 275.1494 380.9199 275.1489 381.0693 C
275.1479 381.3672 L
F
*U
0 D
275.2656 381.3867 m
275.2241 381.3867 275.1846 381.3799 275.1479 381.3672 C
275.1489 381.0693 l
275.1494 380.9199 275.2139 380.7803 275.3262 380.6846 c
275.4912 380.6738 275.6475 380.6367 275.791 380.5801 c
276.0171 380.6328 276.2207 380.6533 276.4307 380.6543 c
276.4434 380.6543 276.4565 380.6543 276.4692 380.6543 c
276.6084 380.6543 276.7534 380.6426 276.9092 380.623 c
276.854 380.6865 276.7949 380.7471 276.7319 380.8047 c
276.3662 381.1367 275.8569 381.376 275.272 381.3867 c
275.27 381.3867 275.2676 381.3867 275.2656 381.3867 C
F
0.42417 0.588952 1 0.337163 0.454902 0.321569 0 Xa
284.7715 428.7368 m
284.7754 428.2266 L
285.0254 428.2285 L
285.0215 428.7388 L
F
284.7813 428.0254 m
284.7852 427.8354 L
285.0352 427.8403 L
285.0313 428.0303 L
F
284.792 427.6172 m
284.7949 427.1069 L
285.0449 427.1084 L
285.042 427.6182 L
F
284.792 426.9058 m
284.7949 426.7158 L
285.0449 426.7197 L
285.042 426.9097 L
F
284.792 426.5371 m
284.7949 426.0269 L
285.0449 426.0283 L
285.042 426.5381 L
F
284.792 425.8257 m
284.7949 425.6357 L
285.0449 425.6396 L
285.042 425.8296 L
F
284.7813 425.4468 m
284.7852 424.9365 L
285.0352 424.9385 L
285.0313 425.4487 L
F
284.792 424.7358 m
284.7949 424.5459 L
285.0449 424.5498 L
285.042 424.7397 L
F
284.7813 424.3667 m
284.7852 423.8564 L
285.0352 423.8584 L
285.0313 424.3687 L
F
284.792 423.6558 m
284.7949 423.4658 L
285.0449 423.4697 L
285.042 423.6597 L
F
284.792 423.2974 m
284.7949 422.7871 L
285.0449 422.7881 L
285.042 423.2988 L
F
284.792 422.5859 m
284.7949 422.396 L
285.0449 422.3999 L
285.042 422.5898 L
F
284.792 422.1772 m
284.7949 421.667 L
285.0449 421.668 L
285.042 422.1787 L
F
284.8018 421.4658 m
284.8047 421.2759 L
285.0547 421.2798 L
285.0518 421.4697 L
F
284.7813 421.0967 m
284.7852 420.5864 L
285.0352 420.5884 L
285.0313 421.0986 L
F
284.792 420.3857 m
284.7949 420.1958 L
285.0449 420.1997 L
285.042 420.3896 L
F
284.7715 420.0269 m
284.7754 419.5166 L
285.0254 419.5186 L
285.0215 420.0288 L
F
284.7813 419.3154 m
284.7852 419.1255 L
285.0352 419.1304 L
285.0313 419.3203 L
F
284.792 418.9375 m
284.7949 418.4268 L
285.0449 418.4277 L
285.042 418.9385 L
F
284.8018 418.2256 m
284.8047 418.0356 L
285.0547 418.0396 L
285.0518 418.2295 L
F
284.792 417.8271 m
284.7949 417.3169 L
285.0449 417.3184 L
285.042 417.8281 L
F
284.792 417.1157 m
284.7949 416.9258 L
285.0449 416.9297 L
285.042 417.1196 L
F
284.792 416.7471 m
284.7949 416.2368 L
285.0449 416.2383 L
285.042 416.748 L
F
284.8018 416.0356 m
284.8047 415.8457 L
285.0547 415.8496 L
285.0518 416.0396 L
F
284.792 415.6372 m
284.7949 415.127 L
285.0449 415.1279 L
285.042 415.6387 L
F
284.8018 414.9155 m
284.8047 414.7261 L
285.0547 414.73 L
285.0518 414.9194 L
F
284.792 414.5674 m
284.7949 414.0571 L
285.0449 414.0586 L
285.042 414.5684 L
F
284.8018 413.856 m
284.8047 413.666 L
285.0547 413.6699 L
285.0518 413.8599 L
F
284.8018 413.4673 m
284.8047 412.957 L
285.0547 412.958 L
285.0518 413.4688 L
F
284.8018 412.7456 m
284.8047 412.5557 L
285.0547 412.5596 L
285.0518 412.7495 L
F
284.8125 412.3472 m
284.8145 411.8369 L
285.0645 411.8379 L
285.0625 412.3481 L
F
284.8125 411.6362 m
284.8145 411.4463 L
285.0645 411.4492 L
285.0625 411.6392 L
F
284.8125 411.2671 m
284.8145 410.7568 L
285.0645 410.7578 L
285.0625 411.2681 L
F
284.8125 410.5562 m
284.8145 410.3662 L
285.0645 410.3691 L
285.0625 410.5591 L
F
284.8018 410.167 m
284.8047 409.6572 L
285.0547 409.6582 L
285.0518 410.168 L
F
284.8125 409.4561 m
284.8145 409.2666 L
285.0645 409.2695 L
285.0625 409.459 L
F
284.8018 409.0972 m
284.8047 408.5869 L
285.0547 408.5879 L
285.0518 409.0986 L
F
284.8125 408.3862 m
284.8145 408.1963 L
285.0645 408.1992 L
285.0625 408.3892 L
F
284.8125 408.0273 m
284.8145 407.5171 L
285.0645 407.5181 L
285.0625 408.0283 L
F
284.8125 407.3164 m
284.8145 407.1265 L
285.0645 407.1294 L
285.0625 407.3193 L
F
284.8125 406.9072 m
284.8145 406.397 L
285.0645 406.3979 L
285.0625 406.9082 L
F
284.8223 406.1963 m
284.8242 406.0063 L
285.0742 406.0093 L
285.0723 406.1992 L
F
284.8018 405.8271 m
284.8047 405.3169 L
285.0547 405.3184 L
285.0518 405.8281 L
F
284.8125 405.1162 m
284.8145 404.9263 L
285.0645 404.9292 L
285.0625 405.1191 L
F
284.8018 404.7471 m
284.8047 404.2368 L
285.0547 404.2383 L
285.0518 404.748 L
F
284.8018 404.0356 m
284.8047 403.8457 L
285.0547 403.8496 L
285.0518 404.0396 L
F
284.8125 403.667 m
284.8145 403.1572 L
285.0645 403.1582 L
285.0625 403.668 L
F
284.8223 402.9561 m
284.8242 402.7666 L
285.0742 402.7695 L
285.0723 402.959 L
F
284.8125 402.5474 m
284.8145 402.0371 L
285.0645 402.0381 L
285.0625 402.5483 L
F
284.8125 401.8364 m
284.8145 401.6465 L
285.0645 401.6494 L
285.0625 401.8394 L
F
284.8223 401.4673 m
284.8242 400.9565 L
285.0742 400.9575 L
285.0723 401.4683 L
F
284.8223 400.7563 m
284.8242 400.5669 L
285.0742 400.5698 L
285.0723 400.7593 L
F
284.8125 400.3569 m
284.8145 399.8472 L
285.0645 399.8481 L
285.0625 400.3579 L
F
284.8223 399.647 m
284.8242 399.4556 L
285.0742 399.4585 L
285.0723 399.6499 L
F
284.8125 399.2866 m
284.8145 398.7769 L
285.0645 398.7778 L
285.0625 399.2876 L
F
284.8223 398.5767 m
284.8242 398.3862 L
285.0742 398.3892 L
285.0723 398.5796 L
F
284.8223 399.3071 m
284.8242 398.7964 L
285.0742 398.7974 L
285.0723 399.3081 L
F
284.832 398.5957 m
284.835 398.4063 L
285.085 398.4102 L
285.082 398.5996 L
F
284.832 398.1968 m
284.835 397.687 L
285.085 397.6885 L
285.082 398.1982 L
F
284.8418 397.4756 m
284.8447 397.2852 L
285.0947 397.2891 L
285.0918 397.4795 L
F
284.832 397.1069 m
284.835 396.5972 L
285.085 396.5986 L
285.082 397.1084 L
F
284.8418 396.3965 m
284.8447 396.2051 L
285.0947 396.209 L
285.0918 396.4004 L
F
284.832 396.0171 m
284.835 395.5068 L
285.085 395.5088 L
285.082 396.0186 L
F
284.832 395.3057 m
284.835 395.1152 L
285.085 395.1191 L
285.082 395.3096 L
F
284.832 394.9463 m
284.835 394.4365 L
285.085 394.4385 L
285.082 394.9482 L
F
284.832 394.2256 m
284.835 394.0352 L
285.085 394.0391 L
285.082 394.2295 L
F
284.832 393.8662 m
284.835 393.3564 L
285.085 393.3584 L
285.082 393.8682 L
F
284.8418 393.1563 m
284.8447 392.9658 L
285.0947 392.9697 L
285.0918 393.1602 L
F
284.832 392.7471 m
284.835 392.2363 L
285.085 392.2383 L
285.082 392.749 L
F
284.8418 392.0352 m
284.8447 391.8457 L
285.0947 391.8496 L
285.0918 392.0391 L
F
284.832 391.6768 m
284.835 391.167 L
285.085 391.1689 L
285.082 391.6787 L
F
284.832 390.9551 m
284.835 390.7656 L
285.085 390.7695 L
285.082 390.959 L
F
284.8223 390.5977 m
284.8242 390.0879 L
285.0742 390.0879 L
285.0723 390.5977 L
F
284.8223 389.8867 m
284.8242 389.6963 L
285.0742 389.6982 L
285.0723 389.8887 L
F
284.832 389.5166 m
284.835 389.0068 L
285.085 389.0088 L
285.082 389.5186 L
F
284.8418 388.7959 m
284.8447 388.6055 L
285.0947 388.6094 L
285.0918 388.7998 L
F
284.832 388.3975 m
284.835 387.8857 L
285.085 387.8877 L
285.082 388.3994 L
F
284.8418 387.6855 m
284.8447 387.4961 L
285.0947 387.5 L
285.0918 387.6895 L
F
284.8418 387.3174 m
284.8447 386.8066 L
285.0947 386.8086 L
285.0918 387.3193 L
F
284.8418 386.6055 m
284.8447 386.416 L
285.0947 386.4199 L
285.0918 386.6094 L
F
284.832 386.2061 m
284.835 385.6963 L
285.085 385.6982 L
285.082 386.208 L
F
284.8418 385.4961 m
284.8447 385.3057 L
285.0947 385.3096 L
285.0918 385.5 L
F
284.832 385.1367 m
284.835 384.626 L
285.085 384.6279 L
285.082 385.1387 L
F
284.8418 384.4258 m
284.8447 384.2363 L
285.0947 384.2402 L
285.0918 384.4297 L
F
284.832 384.0771 m
284.835 383.5664 L
285.085 383.5684 L
285.082 384.0791 L
F
284.8418 383.3652 m
284.8447 383.1758 L
285.0947 383.1797 L
285.0918 383.3691 L
F
284.8418 382.9971 m
284.8447 382.4863 L
285.0947 382.4883 L
285.0918 382.999 L
F
284.8516 382.2842 m
284.8555 382.0947 L
285.1055 382.1006 L
285.1016 382.29 L
F
284.8418 381.8867 m
284.8447 381.376 L
285.0947 381.3779 L
285.0918 381.8887 L
F
284.8516 381.165 m
284.8555 380.9756 L
285.1055 380.9814 L
285.1016 381.1709 L
F
285.6523 428.7261 m
285.6543 428.5361 L
285.9043 428.5391 L
285.9023 428.729 L
F
285.6426 428.3574 m
285.6445 427.8472 L
285.8945 427.8481 L
285.8926 428.3584 L
F
285.6523 427.6465 m
285.6543 427.4561 L
285.9043 427.459 L
285.9023 427.6494 L
F
285.6426 427.2671 m
285.6445 426.7568 L
285.8945 426.7578 L
285.8926 427.2681 L
F
285.6523 426.5464 m
285.6543 426.3564 L
285.9043 426.3594 L
285.9023 426.5493 L
F
285.6426 426.1875 m
285.6445 425.6768 L
285.8945 425.6777 L
285.8926 426.1885 L
F
285.6523 425.4761 m
285.6543 425.2861 L
285.9043 425.2891 L
285.9023 425.479 L
F
285.6426 425.1172 m
285.6445 424.6069 L
285.8945 424.6079 L
285.8926 425.1182 L
F
285.6523 424.4063 m
285.6543 424.2163 L
285.9043 424.2192 L
285.9023 424.4092 L
F
285.6523 423.9971 m
285.6543 423.4868 L
285.9043 423.4878 L
285.9023 423.998 L
F
285.6621 423.2856 m
285.665 423.0957 L
285.915 423.0996 L
285.9121 423.2896 L
F
285.6426 422.917 m
285.6445 422.4072 L
285.8945 422.4082 L
285.8926 422.918 L
F
285.6523 422.2061 m
285.6543 422.0166 L
285.9043 422.0195 L
285.9023 422.209 L
F
285.6318 421.8472 m
285.6348 421.3369 L
285.8848 421.3379 L
285.8818 421.8486 L
F
285.6426 421.1362 m
285.6445 420.9463 L
285.8945 420.9492 L
285.8926 421.1392 L
F
285.6523 420.7573 m
285.6543 420.2471 L
285.9043 420.248 L
285.9023 420.7583 L
F
285.6621 420.0459 m
285.665 419.856 L
285.915 419.8599 L
285.9121 420.0498 L
F
285.6426 419.6372 m
285.6445 419.127 L
285.8945 419.1279 L
285.8926 419.6382 L
F
285.6523 418.9263 m
285.6543 418.7363 L
285.9043 418.7393 L
285.9023 418.9292 L
F
285.6523 418.5674 m
285.6543 418.0571 L
285.9043 418.0581 L
285.9023 418.5684 L
F
285.6621 417.856 m
285.665 417.666 L
285.915 417.6699 L
285.9121 417.8599 L
F
285.6523 417.4473 m
285.6543 416.937 L
285.9043 416.938 L
285.9023 417.4482 L
F
285.6621 416.7358 m
285.665 416.5459 L
285.915 416.5498 L
285.9121 416.7397 L
F
285.6523 416.3872 m
285.6543 415.877 L
285.9043 415.8779 L
285.9023 416.3882 L
F
285.6621 415.6758 m
285.665 415.4858 L
285.915 415.4897 L
285.9121 415.6797 L
F
285.6621 415.2773 m
285.665 414.7671 L
285.915 414.7686 L
285.9121 415.2783 L
F
285.6621 414.5659 m
285.665 414.376 L
285.915 414.3799 L
285.9121 414.5698 L
F
285.6719 414.167 m
285.6748 413.6572 L
285.9248 413.6582 L
285.9219 414.168 L
F
285.6719 413.4458 m
285.6748 413.2559 L
285.9248 413.2598 L
285.9219 413.4497 L
F
285.6719 413.0771 m
285.6748 412.5669 L
285.9248 412.5684 L
285.9219 413.0781 L
F
285.6719 412.3657 m
285.6748 412.1758 L
285.9248 412.1797 L
285.9219 412.3696 L
F
285.6621 411.9873 m
285.665 411.4771 L
285.915 411.4785 L
285.9121 411.9883 L
F
285.6719 411.2759 m
285.6748 411.0859 L
285.9248 411.0898 L
285.9219 411.2798 L
F
285.6621 410.917 m
285.665 410.4072 L
285.915 410.4082 L
285.9121 410.918 L
F
285.6719 410.1958 m
285.6748 410.0059 L
285.9248 410.0098 L
285.9219 410.1997 L
F
285.6719 409.8472 m
285.6748 409.3369 L
285.9248 409.3379 L
285.9219 409.8486 L
F
285.6719 409.1255 m
285.6748 408.936 L
285.9248 408.9399 L
285.9219 409.1294 L
F
285.6719 408.7173 m
285.6748 408.207 L
285.9248 408.208 L
285.9219 408.7188 L
F
285.6816 408.0054 m
285.6855 407.8154 L
285.9355 407.8203 L
285.9316 408.0103 L
F
285.6621 407.6475 m
285.665 407.1367 L
285.915 407.1377 L
285.9121 407.6484 L
F
285.6719 406.9258 m
285.6748 406.7358 L
285.9248 406.7397 L
285.9219 406.9297 L
F
285.6523 406.5674 m
285.6543 406.0571 L
285.9043 406.0581 L
285.9023 406.5684 L
F
285.6621 405.856 m
285.665 405.666 L
285.915 405.6699 L
285.9121 405.8599 L
F
285.6719 405.4873 m
285.6748 404.9771 L
285.9248 404.9785 L
285.9219 405.4883 L
F
285.6816 404.7651 m
285.6855 404.5752 L
285.9355 404.5801 L
285.9316 404.77 L
F
285.6719 404.3672 m
285.6748 403.8569 L
285.9248 403.8584 L
285.9219 404.3682 L
F
285.6719 403.6558 m
285.6748 403.4658 L
285.9248 403.4697 L
285.9219 403.6597 L
F
285.6719 403.2871 m
285.6748 402.7769 L
285.9248 402.7783 L
285.9219 403.2881 L
F
285.6816 402.5752 m
285.6855 402.3853 L
285.9355 402.3901 L
285.9316 402.5801 L
F
285.6719 402.1772 m
285.6748 401.667 L
285.9248 401.668 L
285.9219 402.1787 L
F
285.6816 401.4653 m
285.6855 401.2754 L
285.9355 401.2803 L
285.9316 401.4702 L
F
285.6719 401.1069 m
285.6748 400.5972 L
285.9248 400.5986 L
285.9219 401.1084 L
F
285.6816 400.396 m
285.6855 400.2046 L
285.9355 400.2095 L
285.9316 400.4009 L
F
285.6816 401.126 m
285.6855 400.6162 L
285.9355 400.6182 L
285.9316 401.1279 L
F
285.6816 400.4155 m
285.6855 400.2261 L
285.9355 400.231 L
285.9316 400.4204 L
F
285.6914 400.0068 m
285.6953 399.4971 L
285.9453 399.499 L
285.9414 400.0088 L
F
285.7012 399.2954 m
285.7051 399.105 L
285.9551 399.1099 L
285.9512 399.3003 L
F
285.6914 398.9268 m
285.6953 398.417 L
285.9453 398.4189 L
285.9414 398.9287 L
F
285.7012 398.2153 m
285.7051 398.0249 L
285.9551 398.0298 L
285.9512 398.2202 L
F
285.6816 397.8369 m
285.6855 397.3271 L
285.9355 397.3291 L
285.9316 397.8389 L
F
285.6914 397.1245 m
285.6953 396.9351 L
285.9453 396.9399 L
285.9414 397.1294 L
F
285.6816 396.7568 m
285.6855 396.2471 L
285.9355 396.249 L
285.9316 396.7588 L
F
285.6914 396.0454 m
285.6953 395.8545 L
285.9453 395.8604 L
285.9414 396.0503 L
F
285.6914 395.6865 m
285.6953 395.1768 L
285.9453 395.1787 L
285.9414 395.6885 L
F
285.7012 394.9746 m
285.7051 394.7842 L
285.9551 394.79 L
285.9512 394.9805 L
F
285.6914 394.5674 m
285.6953 394.0566 L
285.9453 394.0586 L
285.9414 394.5693 L
F
285.7012 393.8545 m
285.7051 393.665 L
285.9551 393.6709 L
285.9512 393.8604 L
F
285.6816 393.4873 m
285.6855 392.9766 L
285.9355 392.9785 L
285.9316 393.4893 L
F
285.6914 392.7744 m
285.6953 392.585 L
285.9453 392.5908 L
285.9414 392.7803 L
F
285.6816 392.417 m
285.6855 391.9072 L
285.9355 391.9092 L
285.9316 392.4189 L
F
285.6816 391.7041 m
285.6855 391.5146 L
285.9355 391.5205 L
285.9316 391.71 L
F
285.6914 391.3271 m
285.6953 390.8164 L
285.9453 390.8184 L
285.9414 391.3291 L
F
285.7012 390.6143 m
285.7051 390.4248 L
285.9551 390.4307 L
285.9512 390.6201 L
F
285.6914 390.2168 m
285.6953 389.7061 L
285.9453 389.708 L
285.9414 390.2188 L
F
285.7012 389.4951 m
285.7051 389.3047 L
285.9551 389.3105 L
285.9512 389.501 L
F
285.7012 389.1367 m
285.7051 388.626 L
285.9551 388.6279 L
285.9512 389.1387 L
F
285.7012 388.4248 m
285.7051 388.2354 L
285.9551 388.2412 L
285.9512 388.4307 L
F
285.6914 388.0166 m
285.6953 387.5068 L
285.9453 387.5088 L
285.9414 388.0186 L
F
285.7012 387.3047 m
285.7051 387.1143 L
285.9551 387.1201 L
285.9512 387.3105 L
F
285.6914 386.9561 m
285.6953 386.4463 L
285.9453 386.4482 L
285.9414 386.958 L
F
285.7012 386.2451 m
285.7051 386.0547 L
285.9551 386.0605 L
285.9512 386.251 L
F
285.6914 385.8867 m
285.6953 385.376 L
285.9453 385.3779 L
285.9414 385.8887 L
F
285.7012 385.1748 m
285.7051 384.9854 L
285.9551 384.9912 L
285.9512 385.1807 L
F
285.7012 384.8174 m
285.7051 384.3066 L
285.9551 384.3086 L
285.9512 384.8193 L
F
285.7119 384.1055 m
285.7148 383.916 L
285.9648 383.9199 L
285.9619 384.1094 L
F
285.7012 383.6963 m
285.7051 383.1865 L
285.9551 383.1885 L
285.9512 383.6982 L
F
285.7012 382.9854 m
285.7051 382.7949 L
285.9551 382.8008 L
285.9512 382.9912 L
F
285.7012 382.6367 m
285.7051 382.126 L
285.9551 382.1279 L
285.9512 382.6387 L
F
285.7012 381.9248 m
285.7051 381.7354 L
285.9551 381.7412 L
285.9512 381.9307 L
F
285.7119 381.5166 m
285.7148 381.0068 L
285.9648 381.0088 L
285.9619 381.5186 L
F
0 0.130831 0.219913 0 1 0.878431 0.768627 Xa
222.4023 436.5669 m
223.2715 421.1719 L
226.5537 419.5205 L
230.543 419.7251 L
229.2725 414.6421 L
237.3887 416.4761 L
234.5234 419.9175 L
239.2207 419.8433 L
242.9629 422.1436 L
240.9004 436.7104 L
222.4023 436.5669 L
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
222.1504 436.1279 m
222.1348 423.7432 L
222.1353 423.7197 l
222.1953 422.0107 222.7847 420.7417 223.7852 419.9658 c
224.7813 419.1909 226.0796 418.9268 227.4946 418.9253 c
227.6616 418.9253 227.8306 418.9292 228.001 418.936 C
227.9766 419.5176 L
227.9912 418.936 l
228.0938 418.9385 228.1919 418.9395 228.2856 418.9395 c
229.1475 418.9463 229.6089 418.8105 229.7549 418.6924 c
229.832 418.6333 229.8633 418.5918 229.9019 418.4966 c
229.9375 418.4023 229.9644 418.2461 229.9639 418.0269 c
229.9683 417.4219 229.7612 416.4106 229.6289 415.0747 c
229.5977 414.7544 229.8315 414.4697 230.1514 414.439 c
230.4717 414.4077 230.7563 414.6416 230.7871 414.9619 c
230.9092 416.2397 231.123 417.2056 231.1274 418.0269 c
231.127 418.3281 231.0972 418.6191 230.9927 418.9028 c
230.8428 419.3345 230.4688 419.6968 230.0088 419.8652 c
229.5474 420.0425 229.001 420.1016 228.2856 420.1035 c
228.1812 420.1035 228.0732 420.1021 227.9619 420.0991 C
227.9521 420.0991 l
227.7964 420.0928 227.644 420.0894 227.4946 420.0894 c
226.2183 420.0879 225.1904 420.3403 224.502 420.8828 c
223.8179 421.4243 223.3638 422.2734 223.2983 423.7656 C
222.7168 423.7427 L
223.2988 423.7422 L
223.3145 436.1265 l
223.3149 436.4478 223.0547 436.7085 222.7329 436.709 c
222.4116 436.7095 222.1509 436.4492 222.1504 436.1279 C
F
222.832 434.127 m
223.4043 430.7334 l
225.8975 429.6016 228.834 430.8071 232.748 431.1533 c
237.915 431.4097 236.7744 428.5708 237.4199 425.9355 c
237.751 424.5825 239.8145 423.5332 243.04 424.1934 c
242.3018 427.4941 238.1201 431.1855 237.627 434.8032 C
222.832 434.127 L
F
222.3384 434.0435 m
222.9106 430.6504 l
222.938 430.4868 223.0464 430.3457 223.1973 430.2773 c
224.0405 429.894 224.9248 429.7583 225.835 429.7588 c
227.8984 429.7646 230.1304 430.4229 232.792 430.6543 C
232.748 431.1533 L
232.7729 430.6533 l
232.9844 430.6636 233.1836 430.6689 233.3716 430.6689 c
234.4351 430.6694 235.123 430.5034 235.5552 430.2666 c
235.8804 430.0874 236.0771 429.8774 236.2305 429.6099 c
236.4585 429.2109 236.562 428.6514 236.6309 427.9912 c
236.7031 427.3325 236.7466 426.5835 236.9336 425.8164 c
237.105 425.1177 237.6167 424.5273 238.3408 424.1255 c
239.0684 423.7217 240.0186 423.4902 241.1548 423.4897 c
241.7646 423.4897 242.4277 423.5571 243.1406 423.7026 c
243.2715 423.7295 243.3877 423.8086 243.4604 423.9214 c
243.5332 424.0337 243.5581 424.1724 243.5288 424.3027 c
243.1172 426.1064 241.8496 427.8721 240.6572 429.6587 c
239.458 431.4375 238.3398 433.2275 238.123 434.8711 C
237.1309 434.7354 l
237.4072 432.7617 238.6265 430.897 239.8257 429.1006 c
241.0322 427.3115 242.2246 425.5811 242.5513 424.084 C
243.04 424.1934 L
242.9395 424.6841 l
242.2876 424.5508 241.6909 424.4917 241.1548 424.4917 c
240.1553 424.4907 239.3687 424.6987 238.8276 425.0005 c
238.2842 425.3047 237.9961 425.6865 237.9063 426.0547 c
237.6108 427.2168 237.7266 428.519 237.3008 429.6772 c
237.0854 430.2554 236.6831 430.7988 236.0337 431.1465 c
235.3862 431.4971 234.5327 431.6694 233.3716 431.6704 c
233.1655 431.6704 232.9497 431.665 232.7231 431.6533 C
232.7041 431.6523 l
229.9346 431.4038 227.6768 430.7544 225.835 430.7603 c
225.021 430.7607 224.2954 430.8794 223.6113 431.1895 C
223.4043 430.7334 L
223.8984 430.8169 L
223.3257 434.2104 L
222.3384 434.0435 L
F
237.3125 417.5156 m
236.8042 417.5527 236.2837 417.8633 235.9019 418.272 c
235.7114 418.4736 235.5576 418.6963 235.4575 418.8984 c
235.356 419.0996 235.314 419.2822 235.3159 419.3765 C
235.3242 419.4438 L
235.3252 419.4463 L
235.2881 419.4663 L
235.3174 419.4365 L
235.3252 419.4463 L
235.2881 419.4663 L
235.3174 419.4365 L
235.2944 419.4595 L
235.3115 419.4316 L
235.3174 419.4365 L
235.2944 419.4595 L
235.3115 419.4316 l
235.3115 419.4321 235.3408 419.4497 235.4351 419.4497 C
235.4351 419.6611 L
235.4277 419.4502 L
235.4351 419.4497 L
235.4351 419.6611 L
235.4277 419.4502 L
235.4565 419.4497 l
236.9766 419.4844 238.3066 419.6084 239.4639 419.9072 c
241.1963 420.3477 242.5645 421.2285 243.4268 422.7417 c
244.29 424.2505 244.6719 426.3179 244.6733 429.1802 c
244.6733 430.5586 244.5835 432.123 244.4077 433.9043 c
244.3804 434.1787 244.1357 434.3799 243.8608 434.3525 c
243.5864 434.3252 243.3857 434.0806 243.4126 433.8057 c
243.5859 432.0488 243.6738 430.5146 243.6733 429.1802 c
243.6738 427.3306 243.5044 425.8657 243.1729 424.7241 c
242.6675 423.0093 241.8516 422.0317 240.6147 421.3921 c
239.3745 420.7559 237.6528 420.4971 235.4341 420.4497 C
235.4453 419.9497 L
235.4629 420.4492 L
235.4351 420.4497 l
235.1333 420.4521 234.8262 420.3618 234.6089 420.1426 c
234.3911 419.9243 234.314 419.6323 234.3159 419.3765 c
234.3179 419.0591 234.4141 418.7549 234.562 418.4541 c
234.7861 418.0044 235.1387 417.5615 235.5908 417.2026 c
236.0425 416.8457 236.6011 416.5708 237.2324 416.5186 c
237.5073 416.4966 237.7485 416.7017 237.771 416.9766 c
237.793 417.252 237.5879 417.4932 237.3125 417.5156 C
F
0.761166 0.475013 0 0 0 0.517647 0.988235 Xa
226.1621 440.9771 m
226.1621 450.9517 L
230.1348 450.9517 L
230.1348 440.9771 L
226.1621 440.9771 L
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
226.7441 440.9771 m
226.7441 450.3696 L
229.5527 450.3696 L
229.5527 440.9771 L
230.7168 440.9771 L
230.7168 450.9517 l
230.7168 451.105 230.6548 451.2549 230.5464 451.3633 c
230.438 451.4717 230.2881 451.5337 230.1348 451.5337 C
226.1621 451.5337 l
226.0088 451.5337 225.8589 451.4717 225.7505 451.3633 c
225.6421 451.2549 225.5801 451.105 225.5801 450.9517 C
225.5801 440.9771 L
226.7441 440.9771 L
F
q
229.5112 450.3696 m
228.2471 450.3696 l
227.8267 450.2231 227.1665 449.0195 226.7441 447.6221 C
226.7441 444.6631 l
227.6226 445.1313 228.5688 445.4985 229.5527 445.7637 C
229.5527 449.4038 L
229.5112 450.3696 L
H
W
N
q
226.7441 444.6631 m
229.5527 444.6631 L
229.5527 450.3696 L
226.7441 450.3696 l
226.7441 444.6631 L
h
W
n
1 Ap
0 O
0 g
%AI5_File:
%AI5_BeginRaster
() 1 XG
[ 0.48 0 0 -0.48 226.0801 444 ] 9 15 0 Xh
[ 0.48 0 0 -0.48 226.0801 444 ] 0 0 9 15 9 15 8 3 0 0 0 0
%%BeginData: 856
XI
%0077E30077E30077E30077E30077E30077E30077E30077E30077E30077E3
%0077E30077E30077E30077E30077E30077E30077E30077E30077E30077E3
%0077E30077E30077E30077E30077E30077E30078E40077E30077E30077E3
%0077E30077E30077E30077E30077E30078E40077E30077E30077E30077E3
%0077E30077E30077E30077E30078E50077E30077E30077E30077E30077E3
%0077E30077E30078E40078E50077E30077E30077E30077E30077E30077E3
%0077E30078E40079E60077E30077E30077E30077E30077E30077E30077E3
%0078E50079E70077E30077E30077E30077E30077E30077E30078E40079E6
%0079E70077E30077E30077E30077E30077E30077E30078E50079E6007AE8
%0077E30077E30077E30077E30077E30078E40078E50079E7007AE80077E3
%0077E30077E30077E30077E30078E40079E60079E7007AE90077E30077E3
%0077E30077E30077E30078E50079E6007AE8007BEA0077E30077E30077E3
%0077E30078E40079E60079E7007AE9007BEA0077E30077E30077E30077E3
%0078E50079E6007AE8007AE9007BEB
%%EndData
XH
%AI5_EndRaster
F
Q
Q
0 A
q
*u
0 Ap
1 D
0 J 0 j 1 w 10 M []0 d0 XR
226.7441 447.6221 m
226.6494 447.3086 226.5664 446.9854 226.5015 446.6616 c
226.3452 445.8887 226.2886 445.1152 226.4053 444.4756 c
226.5171 444.54 226.6299 444.6025 226.7441 444.6631 C
226.7441 447.6221 L
H
W
N
229.5527 449.4038 m
229.5527 445.7637 l
229.6045 445.7778 229.6558 445.791 229.7075 445.8047 C
229.5527 449.4038 L
H
W
N
229.5107 450.3848 m
228.3828 450.377 l
228.3657 450.3823 228.3477 450.3848 228.3291 450.3848 c
228.3032 450.3848 228.2759 450.3799 228.2471 450.3696 C
229.5112 450.3696 L
229.5107 450.3848 L
H
W
N
*U
1 Ap
0 O
0 g
%AI5_File:
%AI5_BeginRaster
() 1 XG
[ 0.48 0 0 -0.48 225.6001 443.52 ] 10 16 0 Xh
[ 0.48 0 0 -0.48 225.6001 443.52 ] 0 0 10 16 10 16 8 3 0 0 0 0
%%BeginData: 1012
XI
%000000000000000000000000000000000000000000000000000000000000
%000000000000000000000000000000000000000000000000000000000000
%000000000000000000000000000000000000000000000000000000000000
%000000000000000000000000000000000000000000000000000000000000
%000000000000000000000000000000000000000000000000000000000000
%000000000000000000000000000000000000000000000000000000000000
%000000000000000000000000000000000000000000000000000000000000
%000000000000000000000000000000000000000000000000000000000000
%000000000000000000000000000000000000000000000000000000000000
%000000000000000000000000000000000000000000000000000000000000
%000000000000000000000000000000000000000000000000000000000000
%000000000000000000000000000000000000000000000000000000000000
%000000000000000000000000000000000000000000000000000000000000
%000000000000000000000000000000000000000000000000000000000000
%000000000000000000000000000000000000000000000000000000000000
%000000000000000000000000000000000000000000000000000000000000
%%EndData
XH
%AI5_EndRaster
F
Q
0 A
0 Ap
0 O
0.761166 0.475013 0 0 0 0.517647 0.988235 Xa
0 J 0 j 1 w 10 M []0 d0 XR
245.2725 437.667 m
245.9512 435.2319 248.4229 424.7681 242.2734 424.1079 c
236.6934 423.6572 237.5898 427.3843 237.1572 432.7114 c
236.9854 434.0693 236.6504 433.9033 235.4688 432.7935 c
230.7051 434.3198 223.2852 435.1499 217.4805 433.3384 C
221.9551 436.0625 l
222.0957 448.0435 242.4463 449.1792 245.2725 437.6665 C
245.2725 437.667 L
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
245.2725 437.667 m
244.7119 437.5107 l
245.0308 436.373 245.7578 433.3823 245.7554 430.5815 c
245.7578 429.0659 245.5381 427.6143 244.9883 426.5659 c
244.7139 426.04 244.3647 425.6147 243.9199 425.2974 c
243.4736 424.9805 242.9248 424.7642 242.2114 424.6865 C
242.2734 424.1079 L
242.2266 424.688 l
241.9346 424.6646 241.6631 424.6533 241.4121 424.6533 c
240.3271 424.6533 239.6416 424.8647 239.1919 425.187 c
238.853 425.4302 238.6167 425.7471 238.4292 426.186 c
238.1489 426.8408 238.0181 427.7681 237.9478 428.8887 c
237.875 430.0088 237.854 431.3198 237.7373 432.7588 C
237.7344 432.7847 l
237.687 433.144 237.6372 433.4219 237.5205 433.6865 c
237.46 433.8174 237.377 433.9546 237.2339 434.0723 c
237.0933 434.1919 236.8843 434.2642 236.7041 434.2603 c
236.3276 434.2451 236.1123 434.084 235.8691 433.9141 c
235.6304 433.7358 235.3765 433.5044 235.0703 433.2178 C
235.4688 432.7935 L
235.6465 433.3477 l
232.7363 434.2793 228.896 434.9497 224.9971 434.9507 c
222.3706 434.9502 219.7178 434.646 217.3071 433.894 C
217.4805 433.3384 L
217.7832 432.8413 L
222.2578 435.5654 l
222.4287 435.6694 222.5347 435.8555 222.5371 436.0557 c
222.5781 439.0459 223.9165 441.2603 225.9595 442.7944 c
228.0024 444.3223 230.7705 445.124 233.562 445.1226 c
236.0459 445.1235 238.5381 444.4902 240.5439 443.2261 c
242.5513 441.959 244.0767 440.085 244.707 437.5278 c
244.7778 437.2412 245.0493 437.0532 245.3423 437.0889 c
245.6353 437.124 245.8545 437.3716 245.8545 437.6665 C
245.8545 437.667 L
245.2725 437.667 L
244.7119 437.5107 L
245.2725 437.667 L
244.6904 437.667 L
244.6904 437.6665 L
245.2725 437.6665 L
245.8374 437.8052 l
245.1372 440.6694 243.3887 442.8149 241.1641 444.2109 c
238.938 445.6108 236.2407 446.2856 233.562 446.2866 c
230.5522 446.2852 227.5547 445.4351 225.2632 443.7271 c
222.9712 442.0249 221.4063 439.418 221.373 436.0693 C
221.9551 436.0625 L
221.6523 436.5596 L
217.1777 433.8354 l
216.9272 433.6831 216.8291 433.3657 216.9502 433.0986 c
217.0708 432.8315 217.374 432.6953 217.6538 432.7827 c
219.9165 433.4897 222.4609 433.7871 224.9971 433.7871 c
228.7607 433.7881 232.5093 433.1318 235.291 432.2393 c
235.4927 432.1748 235.7129 432.2246 235.8672 432.3691 c
236.1621 432.6465 236.3989 432.8579 236.5645 432.981 C
236.7412 433.0947 L
236.7573 433.1021 L
236.7593 433.1025 L
236.7041 433.2827 L
236.7041 433.0962 L
236.7593 433.1025 L
236.7041 433.2827 L
236.7041 433.0962 L
236.7041 433.4219 L
236.499 433.1694 L
236.7041 433.0962 L
236.7041 433.4219 L
236.499 433.1694 L
236.6514 433.3569 L
236.4629 433.2056 L
236.499 433.1694 L
236.6514 433.3569 L
236.4629 433.2056 L
236.5317 433.2607 L
236.4551 433.2163 L
236.4629 433.2056 L
236.5317 433.2607 L
236.4551 433.2163 l
236.4663 433.2114 236.54 432.9917 236.5801 432.6382 C
237.1572 432.7114 L
236.5771 432.6646 l
236.7837 430.1836 236.6748 428.0308 237.144 426.3442 c
237.3799 425.5039 237.7969 424.7505 238.5156 424.2397 c
239.2334 423.728 240.1851 423.4888 241.4121 423.4893 c
241.6982 423.4893 242 423.502 242.3203 423.5278 C
242.3354 423.5293 l
243.2207 423.6235 243.979 423.9097 244.5947 424.3491 c
245.5215 425.0088 246.103 425.9844 246.4487 427.0679 c
246.7954 428.1548 246.9185 429.3647 246.9194 430.5815 c
246.917 433.5747 246.166 436.623 245.833 437.8232 c
245.7549 438.104 245.4824 438.2832 245.1938 438.2437 c
244.9048 438.2041 244.6904 437.9585 244.6904 437.667 C
245.2725 437.667 L
F
q
233.5537 445.1226 m
231.4111 445.1226 229.2827 444.6494 227.4858 443.7378 c
226.834 443.3999 226.2046 442.9927 225.6123 442.5073 C
225.6123 442.5068 l
228.1714 443.147 230.4097 443.502 232.4067 443.502 c
233.4873 443.502 234.4976 443.3979 235.4502 443.1797 C
235.4502 445.0005 l
234.8271 445.082 234.1973 445.1226 233.5669 445.1226 c
233.5654 445.1226 233.5635 445.1226 233.562 445.1226 c
233.5591 445.1226 233.5566 445.1226 233.5537 445.1226 C
H
W
N
1 Ap
0 O
0 g
%AI5_File:
%AI5_BeginRaster
() 1 XG
[ 0.48 0 0 -0.48 225.1201 441.6001 ] 23 9 0 Xh
[ 0.48 0 0 -0.48 225.1201 441.6001 ] 0 0 23 9 23 9 8 3 0 0 0 0
%%BeginData: 1309
XI
%1990FC1A91FC1A91FC1B91FC1B91FC1B91FC1C92FC1C92FC1D92FC1D92FC
%1E92FC1E92FC1E92FC1F93FC1F93FC2093FC2093FC2194FC2194FC2194FC
%2294FC2294FC2395FC1990FC1990FC1A91FC1A91FC1B91FC1B91FC1C92FC
%1C92FC1C92FC1D92FC1D92FC1E92FC1E92FC1F93FC1F93FC1F93FC2093FC
%2093FC2194FC2194FC2294FC2294FC2294FC1990FC1990FC1A91FC1A91FC
%1B91FC1B91FC1B91FC1C92FC1C92FC1D92FC1D92FC1E92FC1E92FC1E92FC
%1F93FC1F93FC2093FC2093FC2194FC2194FC2194FC2294FC2294FC1990FC
%1990FC1990FC1A91FC1A91FC1B91FC1B91FC1C92FC1C92FC1C92FC1D92FC
%1D92FC1E92FC1E92FC1F93FC1F93FC1F93FC2093FC2093FC2194FC2194FC
%2294FC2294FC1990FC1990FC1990FC1A91FC1A91FC1B91FC1B91FC1B91FC
%1C92FC1C92FC1D92FC1D92FC1E92FC1E92FC1E92FC1F93FC1F93FC2093FC
%2093FC2194FC2194FC2194FC2294FC1990FC1990FC1990FC1990FC1A91FC
%1A91FC1B91FC1B91FC1C92FC1C92FC1C92FC1D92FC1D92FC1E92FC1E92FC
%1F93FC1F93FC1F93FC2093FC2093FC2194FC2194FC2294FC1990FC1990FC
%1990FC1990FC1A91FC1A91FC1B91FC1B91FC1B91FC1C92FC1C92FC1D92FC
%1D92FC1E92FC1E92FC1E92FC1F93FC1F93FC2093FC2093FC2194FC2194FC
%2194FC1990FC1990FC1990FC1990FC1990FC1A91FC1A91FC1B91FC1B91FC
%1C92FC1C92FC1C92FC1D92FC1D92FC1E92FC1E92FC1F93FC1F93FC1F93FC
%2093FC2093FC2194FC2194FC1990FC1990FC1990FC1990FC1990FC1A91FC
%1A91FC1B91FC1B91FC1B91FC1C92FC1C92FC1D92FC1D92FC1E92FC1E92FC
%1E92FC1F93FC1F93FC2093FC2093FC2194FC2194FC
%%EndData
XH
%AI5_EndRaster
F
Q
0 A
q
0 Ap
0 J 0 j 1 w 10 M []0 d0 XR
233.5713 445.147 m
231.6304 445.147 229.4575 444.7598 227.4858 443.7378 c
229.2827 444.6494 231.4111 445.1226 233.5537 445.1226 c
233.5566 445.1226 233.5591 445.1226 233.562 445.1226 c
233.5635 445.1226 233.5654 445.1226 233.5669 445.1226 c
234.1973 445.1226 234.8271 445.082 235.4502 445.0005 C
235.4502 445.0229 l
234.8623 445.1021 234.23 445.147 233.5713 445.147 C
H
W
N
1 Ap
0 O
0 g
%AI5_File:
%AI5_BeginRaster
() 1 XG
[ 0.48 0 0 -0.48 226.5601 443.04 ] 20 6 0 Xh
[ 0.48 0 0 -0.48 226.5601 443.04 ] 0 0 20 6 20 6 8 3 0 0 0 0
%%BeginData: 760
XI
%1A1A1A1A1A1A1B1B1B1B1B1B1C1C1C1C1C1C1C1C1C1D1D1D1D1D1D1E1E1E
%1E1E1E1F1F1F1F1F1F1F1F1F202020202020212121212121222222222222
%1A1A1A1A1A1A1B1B1B1B1B1B1B1B1B1C1C1C1C1C1C1D1D1D1D1D1D1E1E1E
%1E1E1E1E1E1E1F1F1F1F1F1F202020202020212121212121212121222222
%1919191A1A1A1A1A1A1B1B1B1B1B1B1C1C1C1C1C1C1C1C1C1D1D1D1D1D1D
%1E1E1E1E1E1E1F1F1F1F1F1F1F1F1F202020202020212121212121222222
%1919191A1A1A1A1A1A1B1B1B1B1B1B1B1B1B1C1C1C1C1C1C1D1D1D1D1D1D
%1E1E1E1E1E1E1E1E1E1F1F1F1F1F1F202020202020212121212121212121
%1919191919191A1A1A1A1A1A1B1B1B1B1B1B1C1C1C1C1C1C1C1C1C1D1D1D
%1D1D1D1E1E1E1E1E1E1F1F1F1F1F1F1F1F1F202020202020212121212121
%1919191919191A1A1A1A1A1A1B1B1B1B1B1B1B1B1B1C1C1C1C1C1C1D1D1D
%1D1D1D1E1E1E1E1E1E1E1E1E1F1F1F1F1F1F202020202020212121212121
%%EndData
XH
%AI5_EndRaster
F
Q
0 A
q
0 Ap
0 J 0 j 1 w 10 M []0 d0 XR
240.7383 443.1006 m
240.7383 441.2368 L
240.1563 441.2368 L
239.5952 441.2368 l
241.7793 439.582 243.6895 436.9531 245.5874 433.1294 c
245.355 435.0166 244.939 436.6982 244.7158 437.4961 c
244.7129 437.5068 244.71 437.5171 244.707 437.5278 c
244.0972 440.002 242.6494 441.8364 240.7383 443.1006 C
H
W
N
1 Ap
0 O
0 g
%AI5_File:
%AI5_BeginRaster
() 1 XG
[ 0.48 0 0 -0.48 239.04 432.48 ] 15 24 0 Xh
[ 0.48 0 0 -0.48 239.04 432.48 ] 0 0 15 24 15 24 8 3 0 0 0 0
%%BeginData: 2272
XI
%2A98FC2A98FC2B99FD2B99FD2B99FD2C99FD2C99FD2D9AFD2D9AFD2E9AFD
%2E9AFD2E9AFD2F9BFD2F9BFD309BFD2998FC2A98FC2A98FC2B99FD2B99FD
%2C99FD2C99FD2D9AFD2D9AFD2D9AFD2E9AFD2E9AFD2F9BFD2F9BFD309BFD
%2998FC2A98FC2A98FC2B99FD2B99FD2B99FD2C99FD2C99FD2D9AFD2D9AFD
%2E9AFD2E9AFD2E9AFD2F9BFD2F9BFD2998FC2998FC2A98FC2A98FC2B99FD
%2B99FD2C99FD2C99FD2D9AFD2D9AFD2D9AFD2E9AFD2E9AFD2F9BFD2F9BFD
%2998FC2998FC2A98FC2A98FC2B99FD2B99FD2B99FD2C99FD2C99FD2D9AFD
%2D9AFD2E9AFD2E9AFD2E9AFD2F9BFD2998FC2998FC2998FC2A98FC2A98FC
%2B99FD2B99FD2C99FD2C99FD2D9AFD2D9AFD2D9AFD2E9AFD2E9AFD2F9BFD
%2897FC2998FC2998FC2A98FC2A98FC2B99FD2B99FD2B99FD2C99FD2C99FD
%2D9AFD2D9AFD2E9AFD2E9AFD2E9AFD2897FC2998FC2998FC2998FC2A98FC
%2A98FC2B99FD2B99FD2C99FD2C99FD2D9AFD2D9AFD2D9AFD2E9AFD2E9AFD
%2897FC2897FC2998FC2998FC2A98FC2A98FC2B99FD2B99FD2B99FD2C99FD
%2C99FD2D9AFD2D9AFD2E9AFD2E9AFD2897FC2897FC2998FC2998FC2998FC
%2A98FC2A98FC2B99FD2B99FD2C99FD2C99FD2D9AFD2D9AFD2D9AFD2E9AFD
%2897FC2897FC2897FC2998FC2998FC2A98FC2A98FC2B99FD2B99FD2B99FD
%2C99FD2C99FD2D9AFD2D9AFD2E9AFD2797FC2897FC2897FC2998FC2998FC
%2998FC2A98FC2A98FC2B99FD2B99FD2C99FD2C99FD2D9AFD2D9AFD2D9AFD
%2797FC2897FC2897FC2897FC2998FC2998FC2A98FC2A98FC2B99FD2B99FD
%2B99FD2C99FD2C99FD2D9AFD2D9AFD2797FC2797FC2897FC2897FC2998FC
%2998FC2998FC2A98FC2A98FC2B99FD2B99FD2C99FD2C99FD2D9AFD2D9AFD
%2797FC2797FC2897FC2897FC2897FC2998FC2998FC2A98FC2A98FC2B99FD
%2B99FD2B99FD2C99FD2C99FD2D9AFD2797FC2797FC2797FC2897FC2897FC
%2998FC2998FC2998FC2A98FC2A98FC2B99FD2B99FD2C99FD2C99FD2D9AFD
%2696FC2797FC2797FC2897FC2897FC2897FC2998FC2998FC2A98FC2A98FC
%2B99FD2B99FD2B99FD2C99FD2C99FD2696FC2797FC2797FC2797FC2897FC
%2897FC2998FC2998FC2998FC2A98FC2A98FC2B99FD2B99FD2C99FD2C99FD
%2696FC2696FC2797FC2797FC2897FC2897FC2897FC2998FC2998FC2A98FC
%2A98FC2B99FD2B99FD2B99FD2C99FD2696FC2696FC2797FC2797FC2797FC
%2897FC2897FC2998FC2998FC2A98FC2A98FC2A98FC2B99FD2B99FD2C99FD
%2596FC2696FC2696FC2797FC2797FC2897FC2897FC2897FC2998FC2998FC
%2A98FC2A98FC2B99FD2B99FD2B99FD2596FC2696FC2696FC2797FC2797FC
%2797FC2897FC2897FC2998FC2998FC2A98FC2A98FC2A98FC2B99FD2B99FD
%2596FC2596FC2696FC2696FC2797FC2797FC2897FC2897FC2897FC2998FC
%2998FC2A98FC2A98FC2B99FD2B99FD2596FC2596FC2696FC2696FC2797FC
%2797FC2797FC2897FC2897FC2998FC2998FC2A98FC2A98FC2A98FC2B99FD
%%EndData
XH
%AI5_EndRaster
F
Q
0 A
q
0 Ap
0 J 0 j 1 w 10 M []0 d0 XR
240.7383 443.145 m
240.7383 443.1006 l
242.6494 441.8364 244.0972 440.002 244.707 437.5278 c
244.71 437.5171 244.7129 437.5068 244.7158 437.4961 c
244.939 436.6982 245.355 435.0166 245.5874 433.1294 c
245.5967 433.1108 245.606 433.0918 245.6152 433.0732 c
245.4019 434.3818 245.2549 435.958 244.8091 437.5381 C
244.7119 437.5107 L
244.8091 437.5381 l
244.2285 439.5972 243.1406 441.6616 240.7383 443.145 C
H
W
N
1 Ap
0 O
0 g
%AI5_File:
%AI5_BeginRaster
() 1 XG
[ 0.48 0 0 -0.48 240 432.48 ] 13 24 0 Xh
[ 0.48 0 0 -0.48 240 432.48 ] 0 0 13 24 13 24 8 3 0 0 0 0
%%BeginData: 1972
XI
%2B2B2B2B2B2B2B2B2B2C2C2C2C2C2C2D2D2D2D2D2D2E2E2E2E2E2E2E2E2E
%2F2F2F2F2F2F3030302A2A2A2B2B2B2B2B2B2C2C2C2C2C2C2D2D2D2D2D2D
%2D2D2D2E2E2E2E2E2E2F2F2F2F2F2F3030302A2A2A2B2B2B2B2B2B2B2B2B
%2C2C2C2C2C2C2D2D2D2D2D2D2E2E2E2E2E2E2E2E2E2F2F2F2F2F2F2A2A2A
%2A2A2A2B2B2B2B2B2B2C2C2C2C2C2C2D2D2D2D2D2D2D2D2D2E2E2E2E2E2E
%2F2F2F2F2F2F2A2A2A2A2A2A2B2B2B2B2B2B2B2B2B2C2C2C2C2C2C2D2D2D
%2D2D2D2E2E2E2E2E2E2E2E2E2F2F2F2929292A2A2A2A2A2A2B2B2B2B2B2B
%2C2C2C2C2C2C2D2D2D2D2D2D2D2D2D2E2E2E2E2E2E2F2F2F2929292A2A2A
%2A2A2A2B2B2B2B2B2B2B2B2B2C2C2C2C2C2C2D2D2D2D2D2D2E2E2E2E2E2E
%2E2E2E2929292929292A2A2A2A2A2A2B2B2B2B2B2B2C2C2C2C2C2C2D2D2D
%2D2D2D2D2D2D2E2E2E2E2E2E2929292929292A2A2A2A2A2A2B2B2B2B2B2B
%2B2B2B2C2C2C2C2C2C2D2D2D2D2D2D2E2E2E2E2E2E292929292929292929
%2A2A2A2A2A2A2B2B2B2B2B2B2C2C2C2C2C2C2D2D2D2D2D2D2D2D2D2E2E2E
%2828282929292929292A2A2A2A2A2A2B2B2B2B2B2B2B2B2B2C2C2C2C2C2C
%2D2D2D2D2D2D2E2E2E2828282929292929292929292A2A2A2A2A2A2B2B2B
%2B2B2B2C2C2C2C2C2C2D2D2D2D2D2D2D2D2D282828282828292929292929
%2A2A2A2A2A2A2B2B2B2B2B2B2B2B2B2C2C2C2C2C2C2D2D2D2D2D2D282828
%2828282929292929292929292A2A2A2A2A2A2B2B2B2B2B2B2C2C2C2C2C2C
%2D2D2D2D2D2D2828282828282828282929292929292A2A2A2A2A2A2B2B2B
%2B2B2B2B2B2B2C2C2C2C2C2C2D2D2D272727282828282828292929292929
%2929292A2A2A2A2A2A2B2B2B2B2B2B2C2C2C2C2C2C2D2D2D272727282828
%2828282828282929292929292A2A2A2A2A2A2B2B2B2B2B2B2B2B2B2C2C2C
%2C2C2C2727272727272828282828282929292929292929292A2A2A2A2A2A
%2B2B2B2B2B2B2C2C2C2C2C2C272727272727282828282828282828292929
%2929292A2A2A2A2A2A2B2B2B2B2B2B2B2B2B2C2C2C272727272727272727
%2828282828282929292929292A2A2A2A2A2A2A2A2A2B2B2B2B2B2B2C2C2C
%2626262727272727272828282828282828282929292929292A2A2A2A2A2A
%2B2B2B2B2B2B2B2B2B262626272727272727272727282828282828292929
%2929292A2A2A2A2A2A2A2A2A2B2B2B2B2B2B262626262626272727272727
%2828282828282828282929292929292A2A2A2A2A2A2B2B2B2B2B2B262626
%2626262727272727272727272828282828282929292929292A2A2A2A2A2A
%2A2A2A2B2B2B
%%EndData
XH
%AI5_EndRaster
F
Q
0 A
0 Ap
0 O
0.761166 0.475013 0 0 0 0.517647 0.988235 Xa
0 J 0 j 1 w 10 M []0 d0 XR
236.0322 441.2866 m
236.0322 450.9419 L
240.1563 450.8921 L
240.1563 441.2368 L
236.0322 441.2866 L
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
236.6143 441.2866 m
236.6143 450.353 L
239.5742 450.3169 L
239.5742 441.2368 L
240.7383 441.2368 L
240.7383 450.8921 l
240.7383 451.21 240.481 451.4702 240.1631 451.4741 C
236.0391 451.5239 l
235.8838 451.5259 235.7339 451.4653 235.623 451.356 c
235.5127 451.2466 235.4502 451.0972 235.4502 450.9419 C
235.4502 441.2866 L
236.6143 441.2866 L
F
0.760922 0.678584 0.657038 0.877195 0 0.011765 0.019608 Xa
242.0176 429.8154 m
241.1978 429.814 240.5225 429.1162 240.522 428.2417 c
240.5225 427.3672 241.1978 426.6699 242.0176 426.668 c
242.8374 426.6699 243.5117 427.3672 243.5122 428.2417 c
243.5117 429.1162 242.8374 429.814 242.0176 429.8154 C
F
*u
240.522 428.2417 m
240.5225 429.1162 241.1978 429.814 242.0176 429.8154 c
242.8374 429.814 243.5117 429.1162 243.5122 428.2417 c
243.5117 427.3672 242.8374 426.6699 242.0176 426.668 c
241.1978 426.6699 240.5225 427.3672 240.522 428.2417 C
F
1 D
242.0176 430.1152 m
241.021 430.1143 240.2236 429.2715 240.2222 428.2417 C
240.3721 428.2417 L
240.522 428.2417 L
240.3721 428.2417 L
240.2222 428.2417 l
240.2236 427.2119 241.021 426.3691 242.0176 426.3682 c
243.0142 426.3691 243.8101 427.2119 243.812 428.2417 c
243.8101 429.2715 243.0142 430.1143 242.0176 430.1152 C
F
*U
q
0 D
239.5908 441.2368 m
239.584 441.2368 l
239.5864 441.2344 239.5884 441.2319 239.5908 441.229 C
239.5908 441.2368 L
H
W
N
1 Ap
0 O
0 g
%AI5_File:
%AI5_BeginRaster
() 1 XG
[ 0.48 0 0 -0.48 239.04 440.6401 ] 3 3 0 Xh
[ 0.48 0 0 -0.48 239.04 440.6401 ] 0 0 3 3 3 3 8 3 0 0 0 0
%%BeginData: 61
XI
%1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC
%%EndData
XH
%AI5_EndRaster
F
Q
0 A
q
0 Ap
0 J 0 j 1 w 10 M []0 d0 XR
236.8066 450.3506 m
239.877 449.9849 237.6235 443.4888 239.5742 441.248 C
239.5742 449.8384 L
239.5732 450.3169 L
236.8066 450.3506 L
H
W
N
1 Ap
0 O
0 g
%AI5_File:
%AI5_BeginRaster
() 1 XG
[ 0.48 0 0 -0.48 236.1602 440.6401 ] 9 22 0 Xh
[ 0.48 0 0 -0.48 236.1602 440.6401 ] 0 0 9 22 9 22 8 3 0 0 0 0
%%BeginData: 1252
XI
%1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC
%1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC
%1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC
%1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC
%1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC
%1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC
%1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC
%1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC
%1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC1890FC
%1990FC1990FC1990FC1990FC1990FC1990FC1990FC1990FC1890FC1990FC
%1990FC1990FC1990FC1990FC1990FC1990FC1990FC178FFC1990FC1990FC
%1990FC1990FC1990FC1990FC1990FC1890FC178FFC1990FC1990FC1990FC
%1990FC1990FC1990FC1990FC1890FC168FFC1990FC1990FC1990FC1990FC
%1990FC1990FC1890FC178FFC158EFC1990FC1990FC1990FC1990FC1990FC
%1990FC1890FC168FFC158EFC1990FC1990FC1990FC1990FC1990FC1990FC
%178FFC168FFC148EFC1990FC1990FC1990FC1990FC1990FC1890FC178FFC
%158EFC148EFC1990FC1990FC1990FC1990FC1990FC1890FC168FFC158EFC
%138DFC1990FC1990FC1990FC1990FC1990FC178FFC158EFC148EFC128DFC
%1990FC1990FC1990FC1990FC1890FC168FFC158EFC138DFC128DFC1990FC
%1990FC1990FC1990FC178FFC168FFC148EFC138DFC118CFC
%%EndData
XH
%AI5_EndRaster
F
Q
0 A
q
*u
0 Ap
1 D
0 J 0 j 1 w 10 M []0 d0 XR
239.5742 449.8384 m
239.5742 441.248 l
239.5776 441.2441 239.5806 441.2407 239.584 441.2368 C
239.5908 441.2368 L
239.5742 449.8384 L
H
W
N
236.5322 450.3667 m
236.6279 450.3662 236.7197 450.3608 236.8066 450.3506 C
239.5732 450.3169 L
239.5732 450.3652 L
236.5322 450.3667 L
H
W
N
*U
1 Ap
0 O
0 g
%AI5_File:
%AI5_BeginRaster
() 1 XG
[ 0.48 0 0 -0.48 235.6802 440.6401 ] 10 22 0 Xh
[ 0.48 0 0 -0.48 235.6802 440.6401 ] 0 0 10 22 10 22 8 3 0 0 0 0
%%BeginData: 1390
XI
%191919191919191919191919191919191919191919191919191919191919
%191919191919191919191919191919191919191919191919191919191919
%191919191919191919191919191919191919191919191919191919191919
%191919191919191919191919191919191919191919191919191919191919
%191919191919191919191919191919191919191919191919191919191919
%191919191919191919191919191919191919191919191919191919191919
%191919191919191919191919191919191919191919191919191919191919
%191919191919191919191919191919191919191919191919191919191919
%191919191919191919191919191919191919191919191919191919191919
%191919191919191919191919191919191919191919191919191919181818
%191919191919191919191919191919191919191919191919191919181818
%191919191919191919191919191919191919191919191919191919171717
%191919191919191919191919191919191919191919191919181818171717
%191919191919191919191919191919191919191919191919181818161616
%191919191919191919191919191919191919191919181818171717151515
%191919191919191919191919191919191919191919181818161616151515
%191919191919191919191919191919191919191919171717161616141414
%191919191919191919191919191919191919181818171717151515141414
%191919191919191919191919191919191919181818161616151515131313
%191919191919191919191919191919191919171717151515141414121212
%191919191919191919191919191919181818161616151515131313121212
%191919191919191919191919191919171717161616141414131313111111
%%EndData
XH
%AI5_EndRaster
F
Q
0 A
0 Ap
0 O
0.719356 0.400488 0 0 0.094118 0.564706 0.988235 Xa
0 J 0 j 1 w 10 M []0 d0 XR
227.0786 436.4795 m
225.5303 436.4795 224.0674 436.2993 222.9521 435.897 c
223.7402 435.9878 224.6333 436.0327 225.5835 436.0327 c
228.8525 436.0327 232.8052 435.4985 235.5449 434.4434 c
234.0122 435.6704 230.3555 436.4795 227.0786 436.4795 C
F
245.7378 429.835 m
245.0693 426.4502 243.395 425.1348 240.7734 425.1348 c
240.2407 425.1348 239.6685 425.189 239.0581 425.2915 c
239.1011 425.2549 239.1455 425.2202 239.1919 425.187 c
239.3643 425.0635 239.5713 424.9565 239.8218 424.8711 c
240.0752 424.7905 240.3657 424.7295 240.6753 424.6909 c
240.8979 424.6665 241.1426 424.6533 241.4121 424.6533 c
241.6602 424.6533 241.9272 424.6641 242.2153 424.687 c
242.9268 424.7651 243.4741 424.9814 243.9199 425.2974 c
244.3647 425.6147 244.7139 426.04 244.9883 426.5659 c
245.2617 427.0879 245.4541 427.7095 245.5771 428.3896 C
245.7363 429.8042 l
245.7368 429.8145 245.7373 429.8247 245.7378 429.835 C
F
*u
1 D
0.72726 0.667658 0.65304 0.791501 0.094118 0.094118 0.094118 Xa
239.0547 425.292 m
239.2144 425.1206 239.4849 424.9785 239.8218 424.8711 c
239.5713 424.9565 239.3643 425.0635 239.1919 425.187 c
239.1455 425.2202 239.1011 425.2549 239.0581 425.2915 c
239.0571 425.2915 239.0557 425.292 239.0547 425.292 C
F
245.5771 428.3896 m
245.4541 427.7095 245.2617 427.0879 244.9883 426.5659 c
244.7139 426.04 244.3647 425.6147 243.9199 425.2974 c
243.4741 424.9814 242.9268 424.7651 242.2153 424.687 c
241.9272 424.6641 241.6602 424.6533 241.4121 424.6533 c
241.1426 424.6533 240.8979 424.6665 240.6753 424.6909 c
240.9351 424.6582 241.208 424.6416 241.4834 424.6416 c
242.3853 424.6416 243.3125 424.8237 243.8779 425.2383 c
244.6699 425.7876 245.4023 427.0083 245.5586 428.2231 C
245.5771 428.3896 L
F
245.7422 429.8569 m
245.7407 429.8496 245.7393 429.8423 245.7378 429.835 c
245.7373 429.8247 245.7368 429.8145 245.7363 429.8042 C
245.7422 429.8569 L
F
*U
0 D
0 0.057557 0.101076 0 1 0.937255 0.878431 Xa
226.1382 428.0396 m
226.0864 428.0396 226.0044 427.9785 225.8857 427.8311 c
225.3428 427.6758 224.8071 426.564 225.0444 426.564 c
225.0874 426.564 225.1558 426.6006 225.2539 426.686 c
225.2949 426.6709 225.3354 426.6641 225.3755 426.6641 c
225.6548 426.6641 225.9063 427.0078 226.0581 427.3516 c
226.2095 427.6958 226.2603 428.0396 226.1382 428.0396 C
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
225.5024 428.395 m
224.9458 427.9858 224.665 427.4736 224.6685 426.9761 c
224.6694 426.5474 224.8608 426.1836 225.1021 425.9141 c
225.3472 425.644 225.644 425.4526 225.957 425.3623 c
226.1758 425.3008 226.4033 425.4287 226.4653 425.6479 c
226.5269 425.8667 226.3989 426.0947 226.1797 426.1563 c
226.0513 426.1899 225.854 426.3071 225.7158 426.4648 c
225.5737 426.6235 225.4917 426.8057 225.4927 426.9761 c
225.4961 427.1685 225.5781 427.416 225.9956 427.7349 c
226.1782 427.8711 226.2153 428.1294 226.0791 428.3115 c
225.9429 428.4941 225.6846 428.5313 225.5024 428.395 C
f
226.2041 421.9722 m
226.2104 421.9727 230.0635 421.9878 231.9434 422.1445 c
232.1826 422.1641 232.3599 422.3745 232.3398 422.6133 c
232.3203 422.8525 232.1099 423.0303 231.8711 423.0098 c
230.9707 422.9346 229.5459 422.8916 228.355 422.8682 c
227.1626 422.8452 226.2026 422.8413 226.2002 422.8413 c
225.9604 422.8403 225.7666 422.645 225.7676 422.4048 c
225.7686 422.165 225.9639 421.9712 226.2041 421.9722 C
f
0.118227 0.215946 0.314305 0 0.878431 0.772549 0.67451 Xa
242.5801 423.2759 m
240.8169 422.4868 240.2935 421.4595 238.4795 421.2324 c
237.4238 421.0181 232.9951 421.4941 233.5029 419.2588 c
233.8774 417.5811 234.5088 416.6948 235.1299 416.2769 c
235.3481 416.4458 235.561 416.5518 235.7617 416.5854 c
236.1919 416.5493 236.5894 416.5093 236.9604 416.4609 c
236.9604 416.4941 236.9536 416.5273 236.9395 416.5596 c
236.4277 416.6592 235.9712 416.9019 235.5908 417.2026 c
235.1387 417.5615 234.7861 418.0044 234.562 418.4541 c
234.4141 418.7549 234.3179 419.0591 234.3159 419.3765 c
234.314 419.6323 234.3911 419.9243 234.6089 420.1426 c
234.8232 420.3589 235.1255 420.4497 235.4233 420.4497 c
235.4272 420.4497 235.4312 420.4497 235.4351 420.4497 C
235.4404 420.4497 l
237.6563 420.4976 239.376 420.7563 240.6147 421.3921 c
241.4507 421.8247 242.0947 422.4116 242.5801 423.2759 C
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
242.582 423.2769 m
242.5815 423.2764 242.5806 423.2764 242.5801 423.2759 c
242.0947 422.4116 241.4507 421.8247 240.6147 421.3921 c
239.376 420.7563 237.6563 420.4976 235.4404 420.4497 C
235.4351 420.4497 l
235.4312 420.4497 235.4272 420.4497 235.4233 420.4497 c
235.1255 420.4497 234.8232 420.3589 234.6089 420.1426 c
234.3911 419.9243 234.314 419.6323 234.3159 419.3765 c
234.3179 419.0591 234.4141 418.7549 234.562 418.4541 c
234.7861 418.0044 235.1387 417.5615 235.5908 417.2026 c
235.9712 416.9019 236.4277 416.6592 236.9395 416.5596 c
236.9092 416.6284 236.8452 416.6929 236.7427 416.7471 c
236.5415 416.7959 236.3364 416.8408 236.1274 416.8818 c
235.8564 416.9346 235.6792 417.1968 235.7319 417.4678 c
235.7549 417.5859 235.8174 417.686 235.9033 417.7573 c
234.2183 419.9927 235.0601 420.0083 237.0107 420.1748 c
237.4927 419.9941 237.9619 419.916 238.4111 419.916 c
241.0938 419.916 243.0498 422.7158 242.582 423.2769 C
F
0 0 0 0 1 1 1 Xa
230.1699 416.9668 m
232.2832 416.4844 234.4521 416.4893 235.873 417.2168 C
237.6074 406.0288 L
228.4199 406.2163 L
230.1699 416.9668 L
f
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
230.1699 416.9668 m
230.0864 416.6011 l
231.0552 416.3804 232.0366 416.2583 232.9639 416.2578 c
234.1123 416.2588 235.1812 416.4429 236.0439 416.8828 C
235.873 417.2168 L
235.5024 417.1592 L
237.1685 406.4131 L
228.8594 406.5825 L
230.54 416.9067 L
230.1699 416.9668 L
230.0864 416.6011 L
230.1699 416.9668 L
229.7998 417.0269 L
227.9805 405.8501 L
238.0464 405.6445 L
236.1641 417.7871 L
235.7021 417.5508 l
234.9927 417.186 234.0313 417.0068 232.9639 417.0078 c
232.1025 417.0078 231.1729 417.1226 230.2534 417.3325 C
229.8638 417.4214 L
229.7998 417.0269 L
230.1699 416.9668 L
f
230.0171 415.4072 m
230.5605 415.293 232.002 415.208 233.4561 415.207 c
234.5752 415.2075 235.6777 415.2578 236.3633 415.4043 C
236.2578 415.8936 l
235.6523 415.7617 234.5547 415.7061 233.4561 415.707 c
232.0332 415.7056 230.5674 415.7988 230.1216 415.8965 C
230.0171 415.4072 L
f
230.6704 416.8066 m
230.4878 415.4224 L
230.686 415.396 L
230.8687 416.7803 L
F
231.1699 416.8921 m
231.0234 415.3242 L
231.2227 415.3057 L
231.3691 416.8735 L
F
231.7695 416.8916 m
231.6074 415.3257 L
231.8066 415.3052 L
231.9688 416.8711 L
F
232.3691 416.9233 m
232.248 415.3535 L
232.4473 415.3379 L
232.5684 416.9077 L
F
232.8687 416.8965 m
232.8237 415.3228 L
233.0239 415.3169 L
233.0688 416.8906 L
F
233.5698 416.8926 m
233.5815 415.3184 L
233.7817 415.3203 L
233.77 416.8945 L
F
234.1694 416.9678 m
234.2329 415.3945 L
234.4331 415.4023 L
234.3696 416.9756 L
F
234.8687 416.936 m
234.936 415.3633 L
235.1362 415.3721 L
235.0688 416.9448 L
F
235.4697 417.0386 m
235.6094 415.4707 L
235.8086 415.4883 L
235.6689 417.0562 L
F
0 0.991394 0.954681 0 1 0.031373 0.105882 Xa
221.7324 365.2783 m
224.3457 362.6514 L
234.1094 364.1377 l
235.8594 365.9463 238.6602 363.9063 240.9355 363.79 C
250.5615 364.7451 l
247.9912 381.5771 251.7988 397.7959 243.502 413.0073 c
240.5557 415.7222 239.2383 416.2949 235.7617 416.5854 c
234.1191 416.3096 231.6445 411.1958 232.3174 406.2642 c
233.8867 409.7397 233.5469 411.6904 229.9707 414.5898 c
219.5542 412.0288 226.3154 376.5557 221.7324 365.2783 C
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
229.3374 415.5322 m
227.0708 414.1274 225.71 412.624 224.9629 410.5913 c
223.8462 407.5464 224.0068 403.4702 223.8857 396.4902 c
223.7705 389.5127 223.4063 379.6299 221.3389 365.084 C
221.2769 364.6484 L
221.7017 364.5313 l
222.292 364.3711 222.5928 364.2021 222.729 364.082 c
222.832 363.9893 222.8608 363.9336 222.895 363.8447 c
222.9502 363.7178 222.9541 363.4746 223.1001 363.1396 c
223.25 362.7998 223.5864 362.4883 224.103 362.2871 C
224.2427 362.2295 L
224.3906 362.2598 l
225.6182 362.5146 227.6494 362.502 229.71 362.7207 c
231.772 362.9473 233.9092 363.3975 235.4209 364.7373 C
235.0879 365.1104 L
234.9448 364.6309 l
236.0142 364.3125 237.0313 363.8936 237.9912 363.5449 c
238.9526 363.1992 239.8564 362.9141 240.7402 362.9111 c
241.0879 362.9111 241.4331 362.958 241.7661 363.0693 C
241.8047 363.083 L
241.8408 363.1016 l
243.1362 363.7813 244.02 363.9092 244.896 363.9131 c
245.5591 363.9141 246.229 363.8262 247.0215 363.8252 c
248.0083 363.8232 249.1675 363.9756 250.6626 364.6152 C
250.9863 364.7529 L
250.9658 365.1035 l
250.0205 381.6025 249.6001 394.0684 247.8306 402.7861 c
246.9434 407.145 245.7197 410.5781 243.8789 413.1084 c
242.042 415.6406 239.561 417.2393 236.3179 417.8633 c
236.0469 417.916 235.7847 417.7393 235.7319 417.4678 c
235.6792 417.1968 235.8564 416.9346 236.1274 416.8818 c
239.1563 416.2876 241.356 414.8652 243.0703 412.52 c
245.6406 409.0029 247.0435 403.3247 247.9404 395.4268 c
248.8428 387.5303 249.2593 377.4268 249.9678 365.0469 C
250.4668 365.0752 L
250.271 365.5352 l
248.8857 364.9473 247.9082 364.8271 247.0215 364.8252 c
246.3096 364.8242 245.645 364.9121 244.896 364.9131 c
243.9063 364.917 242.7886 364.7373 241.374 363.9863 C
241.6074 363.5439 L
241.4487 364.0176 l
241.2329 363.9463 240.9995 363.9121 240.7402 363.9111 c
240.083 363.9082 239.2617 364.1455 238.332 364.4854 c
237.4014 364.8223 236.3623 365.252 235.2305 365.5898 C
234.9629 365.6689 L
234.7549 365.4834 l
233.5381 364.3857 231.5972 363.9248 229.603 363.7148 c
227.6074 363.498 225.6045 363.5234 224.1914 363.2402 C
224.291 362.75 L
224.479 363.2129 l
224.1436 363.3535 224.0693 363.4541 224.0239 363.5273 c
223.9893 363.5869 223.9648 363.6719 223.9331 363.8223 c
223.8882 364.0361 223.8081 364.415 223.4927 364.7344 c
223.1802 365.0527 222.7168 365.2881 221.9663 365.4961 C
221.834 365.0137 L
222.3291 364.9434 l
225.0947 384.3945 224.8252 395.5908 224.9702 402.5508 c
225.0405 406.0298 225.2256 408.4331 225.9004 410.2437 c
226.5762 412.0513 227.7075 413.332 229.8662 414.6836 c
230.1001 414.8296 230.1719 415.1377 230.0259 415.3726 c
229.8799 415.6064 229.5713 415.6782 229.3374 415.5322 C
F
*u
1 D
0.418494 0.340734 0.345922 0.008057 0.607843 0.607843 0.607843 Xa
250.3535 364.1152 m
250.3574 364.0928 250.3604 364.0791 y
250.3613 364.0791 250.3594 364.0898 250.3535 364.1152 C
F
250.3438 364.4844 m
250.3179 364.4736 250.2925 364.4639 250.2666 364.4541 c
250.3174 364.2715 250.3428 364.166 250.3535 364.1152 c
250.3433 364.1797 250.3262 364.3193 250.3408 364.458 c
250.3418 364.4668 250.3428 364.4756 250.3438 364.4844 C
F
*U
0 D
0.244785 1 1 0.234165 0.607843 0.019608 0.062745 Xa
240.0767 415.3672 m
249.6782 407.0327 247.6572 370.46 249.7793 365.3398 c
249.8345 365.3604 249.8906 365.3809 249.9473 365.4033 c
249.2515 377.6211 248.834 387.6064 247.9404 395.4268 c
247.0435 403.3247 245.6406 409.0029 243.0703 412.52 c
242.2095 413.6978 241.2261 414.6426 240.0767 415.3672 C
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
239.5625 415.7778 m
239.7373 415.6499 239.9087 415.5127 240.0767 415.3672 c
241.2261 414.6426 242.2095 413.6978 243.0703 412.52 c
245.6406 409.0029 247.0435 403.3247 247.9404 395.4268 c
248.834 387.6064 249.2515 377.6211 249.9473 365.4033 c
249.8906 365.3809 249.8345 365.3604 249.7793 365.3398 c
249.896 365.0576 250.0254 364.8711 250.1699 364.79 c
250.2095 364.6572 250.2412 364.5459 250.2666 364.4541 c
250.2925 364.4639 250.3179 364.4736 250.3438 364.4844 c
250.3682 364.665 250.4502 364.8379 250.6738 364.8379 c
250.6934 364.8379 250.7139 364.8369 250.7354 364.834 c
247.7354 381.7764 251.6055 403.1514 241.4697 415.0479 C
239.5625 415.7778 L
F
0 0.991394 0.954681 0 1 0.031373 0.105882 Xa
233.7119 414.478 m
240.7227 414.166 l
240.2559 415.9761 240.9863 416.3389 237.8008 416.8149 c
235.4453 417.0073 233.75 415.5659 233.7119 414.478 C
f
227.752 415.9878 m
225.499 415.3882 224.8047 414.9453 224.877 412.3857 C
227.3008 414.4976 L
229.9688 413.7603 l
235.7656 408.3579 232.2305 414.4082 229.9482 415.5742 C
227.752 415.9878 L
f
0.249027 0.851286 0.94403 0.186221 0.635294 0.247059 0.156863 Xa
232.4775 411.5596 m
232.0957 411.4512 232.0664 411.1367 232.165 410.7554 c
232.2656 410.2725 232.5176 410.1812 232.9023 410.271 c
233.2266 410.3267 233.2617 410.751 233.1914 411.0181 c
233.1162 411.3052 232.96 411.6802 232.4775 411.5596 C
f
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
232.4775 411.5596 m
232.4639 411.6079 l
232.1792 411.5308 232.063 411.3223 232.0669 411.0811 c
232.0669 410.9751 232.0859 410.8618 232.1167 410.7427 C
232.165 410.7554 L
232.1162 410.7451 l
232.1914 410.3579 232.3921 410.186 232.668 410.1904 C
232.9136 410.2222 L
232.9023 410.271 L
232.9106 410.2217 l
233.1841 410.2705 233.2729 410.541 233.2715 410.7778 C
233.2397 411.0308 l
233.1758 411.2808 233.0386 411.6309 232.6519 411.6328 C
232.4653 411.6079 L
232.4644 411.6079 L
232.4639 411.6079 L
232.4775 411.5596 L
232.4897 411.5112 L
232.6519 411.5327 l
232.9609 411.5347 233.0767 411.2539 233.1431 411.0054 C
233.1719 410.7778 l
233.1699 410.5566 233.0938 410.3525 232.894 410.3203 C
232.8926 410.3203 L
232.8911 410.3198 L
232.668 410.2905 l
232.436 410.2949 232.2959 410.3994 232.2139 410.7656 C
232.2139 410.7671 L
232.2134 410.7681 l
232.1841 410.8813 232.167 410.9873 232.167 411.0811 c
232.1709 411.2959 232.2446 411.4375 232.4912 411.5117 C
232.4775 411.5596 L
232.4897 411.5112 L
232.4775 411.5596 L
f
232.5684 410.8857 m
232.4648 410.7241 L
232.3047 410.8311 L
232.4092 410.9922 L
232.5684 410.8857 L
f
232.9453 410.9878 m
232.8408 410.8262 L
232.6807 410.9326 L
232.7852 411.0942 L
232.9453 410.9878 L
f
233.6343 410.1738 m
233.4878 411.7061 L
233.4819 411.7422 l
233.2046 412.9302 232.645 413.7734 231.9282 414.3076 c
231.2119 414.8428 230.3535 415.064 229.4941 415.0635 c
228.3237 415.0625 227.1436 414.6602 226.2329 414.0503 c
225.3281 413.4395 224.6641 412.6143 224.6353 411.6948 C
224.9092 411.6885 L
225.1831 411.6953 l
225.1802 411.8198 225.1777 411.9458 225.1777 412.0732 c
225.1768 412.8525 225.2593 413.6729 225.6099 414.3291 c
225.9629 414.9834 226.5596 415.5049 227.7192 415.7354 c
227.8564 415.7617 228.0146 415.7769 228.1875 415.7769 c
229.5557 415.7734 231.7813 414.8506 232.9165 411.7681 c
232.9688 411.626 233.1265 411.5532 233.2686 411.6055 c
233.4106 411.6577 233.4834 411.8154 233.4312 411.9575 c
232.2271 415.2378 229.7866 416.3281 228.1875 416.3247 c
227.9829 416.3247 227.7915 416.3071 227.6152 416.2734 c
226.3281 416.0283 225.543 415.3809 225.126 414.5864 c
224.7065 413.7944 224.6309 412.8872 224.6299 412.0732 c
224.6299 411.9399 224.6318 411.8091 224.6353 411.6816 c
224.6392 411.5327 224.7607 411.4141 224.9097 411.4146 c
225.0586 411.4146 225.1797 411.5332 225.1831 411.6821 c
225.1909 412.3193 225.7129 413.0449 226.5381 413.5952 c
227.3574 414.1465 228.4517 414.5166 229.4941 414.5156 c
230.2617 414.5151 230.9966 414.3193 231.6006 413.8682 c
232.2036 413.4165 232.6914 412.7051 232.9478 411.6172 C
233.2148 411.6797 L
232.9419 411.6538 L
233.0884 410.1221 l
233.103 409.9712 233.2368 409.8608 233.3872 409.875 c
233.5381 409.8896 233.6484 410.0234 233.6343 410.1738 C
f
233.3667 412.0195 m
233.6523 413.1309 233.9478 414.2671 234.5454 415.0991 c
235.146 415.9272 236.0107 416.4902 237.604 416.5112 C
237.6016 416.7852 L
237.5859 416.5117 l
238.7046 416.4482 239.4487 416.2212 239.8862 415.9268 c
240.3223 415.6279 240.4746 415.2964 240.4805 414.8901 c
240.4805 414.7236 240.4507 414.5439 240.3911 414.355 C
240.6523 414.2725 L
240.835 414.4766 l
239.8491 415.3623 238.8145 415.7231 237.8438 415.7217 c
236.4653 415.7192 235.2451 415.0186 234.3652 414.2075 c
233.9243 413.8008 233.5674 413.3638 233.3149 412.9575 c
233.0649 412.5479 232.9102 412.1816 232.9053 411.8462 C
232.9209 411.6851 l
232.9517 411.5371 233.0967 411.4419 233.2451 411.4722 c
233.3931 411.5029 233.4883 411.6479 233.458 411.7964 C
233.4536 411.8462 l
233.4487 411.9897 233.5566 412.3135 233.7813 412.6685 c
234.4482 413.7568 236.0708 415.1855 237.8438 415.1733 c
238.6797 415.1714 239.5649 414.876 240.4697 414.0684 c
240.5391 414.0059 240.6348 413.9834 240.7246 414.0083 c
240.8149 414.0327 240.8857 414.1011 240.9136 414.1899 c
240.9873 414.4233 241.0288 414.6577 241.0288 414.8901 c
241.0342 415.46 240.7578 416.0103 240.1909 416.3823 c
239.6255 416.7583 238.793 416.9902 237.6172 417.0586 C
237.5991 417.0591 l
235.874 417.0518 234.7759 416.3765 234.0996 415.418 c
233.4199 414.4639 233.125 413.2656 232.8359 412.1567 c
232.7983 412.0098 232.8862 411.8604 233.0327 411.8223 c
233.1797 411.7847 233.3291 411.8726 233.3672 412.019 c
233.3667 412.0195 L
f
227.4409 414.23 m
228.894 414.1616 230.0337 413.5317 230.8267 412.5645 c
231.6177 411.5967 232.0547 410.2847 232.0542 408.8662 c
232.0542 408.4995 232.0254 408.1265 231.9658 407.75 C
231.9233 407.48 L
234.6577 407.5396 L
234.6479 407.772 l
234.6133 408.6216 234.5645 409.3896 234.5645 410.0767 c
234.5649 411.3555 234.7319 412.3262 235.4165 413.0864 c
236.1011 413.8506 237.3643 414.4478 239.6362 414.856 C
239.5552 415.3052 l
237.2432 414.8882 235.8765 414.2769 235.0771 413.3916 c
234.2773 412.5029 234.1069 411.3838 234.1074 410.0767 c
234.1074 409.3682 234.1572 408.5967 234.1919 407.7534 C
234.4199 407.7627 L
234.415 407.9912 L
232.1865 407.9429 L
232.1914 407.7144 L
232.417 407.6787 l
232.48 408.0781 232.5112 408.4756 232.5112 408.8662 c
232.5112 410.3774 232.0474 411.792 231.1802 412.8535 c
230.3145 413.915 229.0386 414.6152 227.4614 414.686 C
227.4409 414.23 L
f
0.249027 0.851286 0.94403 0.186221 0.635294 0.247059 0.156863 Xa
233.2676 409.5962 m
232.8721 409.5679 232.7793 409.2656 232.7988 408.8721 c
232.7988 408.3789 233.0264 408.2383 233.4219 408.248 c
233.752 408.2368 233.8711 408.645 233.8574 408.9209 c
233.8418 409.2173 233.7646 409.6157 233.2676 409.5962 C
f
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
233.2676 409.5962 m
233.2642 409.646 l
232.8701 409.6216 232.7402 409.3188 232.7466 408.9663 C
232.749 408.8696 L
232.7988 408.8721 L
232.749 408.8721 l
232.7485 408.627 232.8037 408.4551 232.9175 408.3447 c
233.0313 408.2354 233.1929 408.1978 233.3848 408.1978 C
233.4229 408.1982 L
233.4219 408.248 L
233.4204 408.1982 L
233.4351 408.1978 l
233.7886 408.2051 233.9082 408.6006 233.9082 408.8779 C
233.9072 408.9233 l
233.897 409.2124 233.8076 409.6479 233.3022 409.647 C
233.2651 409.646 L
233.2642 409.646 L
233.2676 409.5962 L
233.27 409.5464 L
233.3022 409.5469 l
233.729 409.5459 233.7871 409.208 233.8076 408.9185 C
233.8086 408.8779 l
233.8086 408.7505 233.7793 408.5996 233.7168 408.4858 c
233.6528 408.3716 233.5654 408.2983 233.4351 408.2979 C
233.4233 408.2979 L
233.4214 408.2979 L
233.4209 408.2979 L
233.3848 408.2979 l
233.0259 408.3076 232.8584 408.4111 232.8486 408.8721 C
232.8486 408.8735 L
232.8486 408.8745 L
232.8462 408.9663 l
232.8525 409.3076 232.9385 409.5186 233.271 409.5464 C
233.2676 409.5962 L
233.27 409.5464 L
233.2676 409.5962 L
f
233.2207 408.9175 m
233.0859 408.7808 L
232.9512 408.9175 L
233.0859 409.0542 L
233.2207 408.9175 L
f
233.6094 408.9409 m
233.4746 408.8042 L
233.3398 408.9409 L
233.4746 409.0776 L
233.6094 408.9409 L
f
233.6855 410.918 m
234.0234 410.8794 L
234.0791 410.9233 L
234.0352 410.979 L
233.6973 411.0176 L
233.6416 410.9736 L
233.6855 410.918 L
F
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
